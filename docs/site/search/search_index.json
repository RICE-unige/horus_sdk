{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HORUS SDK Documentation","text":"Holistic Operational Reality for Unified Systems Mixed Reality Robot Management SDK"},{"location":"#welcome-to-horus-sdk","title":"Welcome to HORUS SDK","text":"<p>HORUS SDK is the official toolkit that connects your ROS robot fleets to the HORUS Mixed-Reality fleet management system running on Meta Quest 3. The SDK enables robot registration, sensor integration, and real-time data streaming to create immersive 3D robot management experiences.</p>"},{"location":"#what-is-horus","title":"\ud83c\udfaf What is HORUS?","text":"<p>HORUS (Holistic Operational Reality for Unified Systems) is a Mixed Reality robot fleet management system that runs on Meta Quest 3 headsets. It transforms how operators interact with multiple robots by providing:</p> <ul> <li>Immersive 3D robot visualization with real-time sensor data overlay</li> <li>Spatial robot control through intuitive MR gestures and interfaces</li> <li>Multi-robot coordination with automatic color coding and identification</li> <li>Live sensor fusion displaying camera feeds, LiDAR, and telemetry in 3D space</li> <li>Fleet-wide monitoring with simultaneous robot status and mission tracking</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"\ud83e\udd16 ROS2 Robot Fleet              Physical RobotsSensor Systems          ROS2 Topics \u26a1 HORUS SDK              Python/C++ APIRobot Management          Port 8080 \ud83d\udd25 HORUS Backend          C++ Engine \u2022 TCP Server      Port 10000 \ud83c\udf09 ROS-TCP-Endpoint          Unity Bridge \u2022 Network Handler      TCP Connection \ud83d\udc68\u200d\ud83d\udcbc Robot Operator              Spatial Control          MR Interface \u27f7 \ud83e\udd7d HORUS MR App              Quest 3 Interface3D Visualization"},{"location":"#system-flow","title":"System Flow:","text":"<ol> <li> <p>\ud83e\udd16 ROS2 Robots publish sensor data and receive commands via ROS2 topics</p> </li> <li> <p>\u26a1 HORUS SDK interfaces with robot systems and manages registrations  </p> </li> <li> <p>\ud83d\udd25 Backend processes data and maintains TCP server on port 8080</p> </li> <li> <p>\ud83c\udf09 TCP Endpoint bridges ROS2 and Unity on port 10000</p> </li> <li> <p>\ud83e\udd7d Quest 3 App provides immersive MR interface for robot control</p> </li> <li> <p>\ud83d\udc68\u200d\ud83d\udcbc Operators interact spatially with robots in mixed reality</p> </li> </ol>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get started with HORUS SDK in minutes:</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Quest 3 Required</p> <p>HORUS is a Mixed Reality system that requires a Meta Quest 3 headset with the HORUS MR app installed. The SDK connects your robots to this MR interface.</p>"},{"location":"#installation","title":"Installation","text":"Quick Test (No Installation)Full Installation <pre><code>git clone --recursive https://github.com/RICE-unige/horus_sdk.git\ncd horus_sdk\n\n# Build ROS2 workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\ncd ..\n\n# Test SDK backend\npython3 examples/quick_test.py\n</code></pre> <pre><code># Install SDK\npip install -e python/\n\n# Build ROS2 workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\n\n# Run robot registration example\npython3 examples/carter_robot_setup.py\n</code></pre>"},{"location":"#your-first-robot","title":"Your First Robot","text":"<pre><code>from horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan, Lidar3D\nfrom horus.dataviz import DataViz\n\n# Initialize HORUS SDK backend connection\nclient = Client(backend='ros2')\n\n# Create a robot for MR visualization\nrobot = Robot(\n    name=\"fleet_robot_01\",\n    robot_type=RobotType.WHEELED\n)\n\n# Add sensors that will appear in Quest 3\ncamera = Camera(\n    name=\"front_camera\",\n    topic=\"/camera/image_raw\",\n    frame_id=\"camera_link\"\n)\nlidar = Lidar3D(\n    name=\"3d_lidar\",\n    topic=\"/lidar_points\",\n    frame_id=\"lidar_link\"\n)\nrobot.add_sensor(camera)\nrobot.add_sensor(lidar)\n\n# Create 3D visualization for MR\ndataviz = robot.create_dataviz()\nrobot.add_path_planning_to_dataviz(dataviz, \"/global_path\", \"/local_path\")\n\n# Register robot with HORUS MR system\nsuccess, result = robot.register_with_horus(dataviz)\nif success:\n    print(f\"\u2705 Robot registered with HORUS MR App!\")\n    print(f\"   Quest 3 can now see robot: {result['robot_id']}\")\n    print(f\"   MR Color: {result['assigned_color']}\")\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"\ud83d\ude80 Getting Started <p>New to HORUS? Start here for installation, basic concepts, and your first robot setup.</p> Quick Start \u2192 \ud83d\udc65 User Guide <p>Comprehensive guides for robot management, sensors, visualization, and Mixed Reality integration.</p> User Guide \u2192 \ud83d\udd27 Developer Guide <p>Deep dive into plugin development, ROS integration, testing, and contributing to HORUS.</p> Developer Guide \u2192 \ud83d\udccb API Reference <p>Complete API documentation with examples for all HORUS SDK modules and classes.</p> API Reference \u2192"},{"location":"#key-features","title":"\u2728 Key Features","text":""},{"location":"#mixed-reality-fleet-management","title":"Mixed Reality Fleet Management","text":"<ul> <li>Multi-robot visualization in shared 3D space with automatic color coding</li> <li>Real-time sensor fusion displaying camera, LiDAR, and telemetry in MR</li> <li>Spatial robot control through Quest 3 gestures and interfaces</li> <li>Live fleet monitoring with simultaneous robot status tracking</li> </ul>"},{"location":"#professional-sdk-architecture","title":"Professional SDK Architecture","text":"<ul> <li>Modular design with dedicated robot, sensor, and visualization modules</li> <li>Type-safe Python implementation with comprehensive validation</li> <li>ROS2 integration for seamless robot system connectivity</li> <li>Extensible plugin system for custom robot types and sensors</li> </ul>"},{"location":"#quest-3-optimization","title":"Quest 3 Optimization","text":"<ul> <li>Native TCP communication for low-latency MR experience</li> <li>Real-time connection monitoring with automatic Quest 3 detection</li> <li>3D sensor visualization with point clouds, camera feeds, and paths</li> <li>Immersive robot control through spatial MR interfaces</li> </ul>"},{"location":"#production-ready-framework","title":"Production-Ready Framework","text":"<ul> <li>Comprehensive testing with CI/CD integration and validation</li> <li>Professional initialization with animated status and connection monitoring</li> <li>Robust error handling with graceful connection management</li> <li>Clean process lifecycle with automatic backend management</li> </ul>"},{"location":"#current-status","title":"\ud83c\udfaf Current Status","text":"<p>Version: 0.1.0-alpha</p> Component Status Description Python SDK \u2705 Working Robot registration and sensor integration C++ Backend \u2705 Working ROS2 node with TCP server for MR communication Quest 3 Integration \u2705 Working Real-time MR app connection via TCP bridge Robot Examples \u2705 Working Carter robot and multi-robot fleet demos Documentation \ud83d\udea7 In Progress This documentation site HORUS MR App \ud83d\udea7 In Development Quest 3 Mixed Reality interface Plugin System \ud83d\udccb Planned Extensible robot type plugins"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":""},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: You're reading it! Check the User Guide and API Reference</li> <li>GitHub Issues: Report bugs or request features</li> <li>Discussions: Join the community discussions</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>HORUS SDK is open source and welcomes contributions! See our Contributing Guide to get started.</p>"},{"location":"#research-citation","title":"Research &amp; Citation","text":"<p>HORUS SDK is developed at the RICE Lab, University of Genoa. If you use HORUS in academic work, please cite:</p> <pre><code>@misc{adekoya2025horus,\n  title   = {HORUS: A Mixed Reality Interface for Managing Teams of Mobile Robots},\n  author  = {Adekoya, Omotoye Shamsudeen and Sgorbissa, Antonio and Recchiuto, Carmine T.},\n  year    = {2025},\n  eprint  = {2506.02622},\n  archivePrefix = {arXiv},\n  primaryClass  = {cs.RO}\n}\n</code></pre> <p>Ready to build amazing robot experiences in Mixed Reality?</p> Get Started Now View on GitHub"},{"location":"api/","title":"API Reference","text":"<p>Complete API documentation for the HORUS Mixed Reality robot fleet management SDK.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>The HORUS SDK provides a comprehensive Python API for connecting ROS robots to the Mixed Reality fleet management system running on Meta Quest 3.</p>"},{"location":"api/#sdk-architecture","title":"SDK Architecture","text":"<p>The SDK is organized into focused modules for different aspects of robot fleet management:</p> <pre><code>graph TB\n    A[horus.Client] --&gt; B[Robot Management]\n    A --&gt; C[Backend Communication]\n\n    B --&gt; D[horus.robot.Robot]\n    B --&gt; E[horus.sensors.*]\n    B --&gt; F[horus.dataviz.DataViz]\n\n    C --&gt; G[horus.bridge.ros2]\n    C --&gt; H[horus.bridge.unity_tcp]\n\n    I[horus.color.ColorManager] --&gt; B\n    J[horus.utils.*] --&gt; A\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec\n    style F fill:#e3f2fd</code></pre>"},{"location":"api/#module-overview","title":"Module Overview","text":""},{"location":"api/#core-sdk-components","title":"Core SDK Components","text":"Module Description Key Classes horus.Client Main SDK orchestrator and backend connection <code>Client</code> horus.robot Robot modeling and lifecycle management <code>Robot</code>, <code>RobotType</code> horus.sensors Sensor integration and configuration <code>Camera</code>, <code>Lidar3D</code>, <code>LaserScan</code> horus.dataviz 3D data visualization for Mixed Reality <code>DataViz</code> horus.color Multi-robot color management <code>ColorManager</code> horus.bridge Communication adapters <code>ROS2Bridge</code>, <code>UnityTCPBridge</code> horus.utils Supporting utilities and helpers <code>BackendManager</code>, <code>Spinner</code>"},{"location":"api/#quick-start","title":"Quick Start","text":""},{"location":"api/#basic-robot-registration","title":"Basic Robot Registration","text":"<pre><code>from horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan\n\n# Initialize SDK\nclient = Client(backend='ros2')\n\n# Create robot\nrobot = Robot(\"my_robot\", RobotType.WHEELED)\n\n# Add sensors\ncamera = Camera(\"front_cam\", \"/camera/image_raw\", \"camera_link\")\nrobot.add_sensor(camera)\n\n# Create MR visualization\ndataviz = robot.create_dataviz()\n\n# Register with HORUS MR system\nsuccess, result = robot.register_with_horus(dataviz)\n</code></pre>"},{"location":"api/#multi-robot-fleet-management","title":"Multi-Robot Fleet Management","text":"<pre><code>from horus import Client, Robot, RobotType\nfrom horus.color import ColorManager\n\nclient = Client(backend='ros2')\n\n# Create multiple robots\nrobots = [\n    Robot(\"scout_01\", RobotType.WHEELED),\n    Robot(\"scout_02\", RobotType.WHEELED),\n    Robot(\"delivery_01\", RobotType.AUTONOMOUS_VEHICLE)\n]\n\n# Each robot gets unique color automatically\nfor robot in robots:\n    dataviz = robot.create_dataviz()\n    robot.register_with_horus(dataviz)\n</code></pre>"},{"location":"api/#api-documentation-structure","title":"API Documentation Structure","text":""},{"location":"api/#by-category","title":"By Category","text":"<ul> <li> <p>:material-api:{ .lg .middle } Client API</p> <p>Main SDK interface for backend connection and orchestration.</p> <p>:octicons-arrow-right-24: Client Documentation</p> </li> <li> <p>:material-robot:{ .lg .middle } Robot API</p> <p>Robot creation, configuration, and lifecycle management.</p> <p>:octicons-arrow-right-24: Robot Documentation</p> </li> <li> <p>:material-radar:{ .lg .middle } Sensors API</p> <p>Sensor modeling, integration, and MR visualization.</p> <p>:octicons-arrow-right-24: Sensors Documentation</p> </li> <li> <p>:material-chart-line:{ .lg .middle } DataViz API</p> <p>3D data visualization and Mixed Reality rendering.</p> <p>:octicons-arrow-right-24: DataViz Documentation</p> </li> <li> <p>:material-palette:{ .lg .middle } Color API</p> <p>Multi-robot color management and visual identification.</p> <p>:octicons-arrow-right-24: Color Documentation</p> </li> <li> <p>:material-bridge:{ .lg .middle } Bridge API</p> <p>Communication adapters for ROS2 and Unity TCP.</p> <p>:octicons-arrow-right-24: Bridge Documentation</p> </li> <li> <p>:material-tools:{ .lg .middle } Utils API</p> <p>Utilities, helpers, and supporting infrastructure.</p> <p>:octicons-arrow-right-24: Utils Documentation</p> </li> </ul>"},{"location":"api/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"api/#robot-registration-pattern","title":"Robot Registration Pattern","text":"<pre><code># Standard robot registration workflow\ndef register_robot(name: str, robot_type: RobotType):\n    # 1. Create robot\n    robot = Robot(name, robot_type)\n\n    # 2. Configure sensors\n    camera = Camera(f\"{name}_camera\", \"/camera/image_raw\", \"camera_link\")\n    robot.add_sensor(camera)\n\n    # 3. Create visualization\n    dataviz = robot.create_dataviz()\n    robot.add_path_planning_to_dataviz(dataviz, \"/global_path\", \"/local_path\")\n\n    # 4. Register with MR system\n    success, result = robot.register_with_horus(dataviz)\n\n    return success, result\n</code></pre>"},{"location":"api/#sensor-configuration-pattern","title":"Sensor Configuration Pattern","text":"<pre><code># Comprehensive sensor setup\ndef configure_robot_sensors(robot: Robot):\n    # Camera sensors\n    front_camera = Camera(\"front_cam\", \"/front_camera/image_raw\", \"front_camera_link\")\n    rear_camera = Camera(\"rear_cam\", \"/rear_camera/image_raw\", \"rear_camera_link\")\n\n    # LiDAR sensors\n    lidar_2d = LaserScan(\"lidar_2d\", \"/scan\", \"base_scan\")\n    lidar_3d = Lidar3D(\"lidar_3d\", \"/velodyne_points\", \"velodyne_link\")\n\n    # Add all sensors\n    for sensor in [front_camera, rear_camera, lidar_2d, lidar_3d]:\n        robot.add_sensor(sensor)\n\n    return robot\n</code></pre>"},{"location":"api/#error-handling-pattern","title":"Error Handling Pattern","text":"<pre><code>from horus.core.exceptions import HorusSDKError, RobotRegistrationError\n\ndef safe_robot_registration(robot: Robot, dataviz: DataViz):\n    try:\n        success, result = robot.register_with_horus(dataviz)\n        if success:\n            print(f\"\u2713 Robot registered: {result['robot_id']}\")\n            return result\n        else:\n            print(f\"\u2717 Registration failed: {result['error']}\")\n            return None\n    except RobotRegistrationError as e:\n        print(f\"\u2717 Registration error: {e}\")\n        return None\n    except HorusSDKError as e:\n        print(f\"\u2717 SDK error: {e}\")\n        return None\n</code></pre>"},{"location":"api/#type-definitions","title":"Type Definitions","text":""},{"location":"api/#core-types","title":"Core Types","text":"<pre><code>from typing import Dict, List, Optional, Tuple, Union\nfrom enum import Enum\n\nclass RobotType(Enum):\n    WHEELED = \"wheeled\"\n    LEGGED = \"legged\"\n    FLYING = \"flying\"\n    AUTONOMOUS_VEHICLE = \"autonomous_vehicle\"\n    CUSTOM = \"custom\"\n\nclass SensorType(Enum):\n    CAMERA = \"camera\"\n    LIDAR_2D = \"lidar_2d\"\n    LIDAR_3D = \"lidar_3d\"\n    IMU = \"imu\"\n    GPS = \"gps\"\n    CUSTOM = \"custom\"\n\n# Registration result type\nRegistrationResult = Dict[str, Union[str, int, bool]]\n\n# Robot configuration type\nRobotConfig = Dict[str, Union[str, int, List, Dict]]\n</code></pre>"},{"location":"api/#method-signatures","title":"Method Signatures","text":"<pre><code># Robot registration\ndef register_with_horus(\n    self, \n    dataviz: DataViz\n) -&gt; Tuple[bool, RegistrationResult]:\n    \"\"\"Register robot with HORUS MR system.\"\"\"\n\n# Sensor addition\ndef add_sensor(\n    self, \n    sensor: Union[Camera, LaserScan, Lidar3D, IMU, GPS]\n) -&gt; None:\n    \"\"\"Add sensor to robot configuration.\"\"\"\n\n# DataViz creation\ndef create_dataviz(\n    self, \n    name: Optional[str] = None\n) -&gt; DataViz:\n    \"\"\"Create 3D visualization configuration.\"\"\"\n</code></pre>"},{"location":"api/#auto-generated-api-documentation","title":"Auto-Generated API Documentation","text":"<p>The complete API documentation is automatically generated from Python docstrings and type hints. Each module page includes:</p> <ul> <li>Class Documentation: Complete class definitions with methods and properties</li> <li>Method Signatures: Full type annotations and parameter descriptions</li> <li>Usage Examples: Real-world code examples for each major feature</li> <li>Error Handling: Exception types and error handling patterns</li> <li>Cross-References: Links to related classes and modules</li> </ul>"},{"location":"api/#examples-and-tutorials","title":"Examples and Tutorials","text":"<p>For practical usage examples, see:</p> <ul> <li>Getting Started - Basic SDK usage</li> <li>Examples - Comprehensive real-world examples</li> <li>User Guide - Feature-specific documentation</li> </ul>"},{"location":"api/#development-and-contributing","title":"Development and Contributing","text":"<p>To contribute to the API documentation:</p> <ol> <li>Update Docstrings: Add Google-style docstrings to Python code</li> <li>Add Type Hints: Include complete type annotations</li> <li>Write Examples: Add usage examples to docstrings</li> <li>Test Documentation: Verify examples work correctly</li> </ol> <p>See the Developer Guide for detailed contribution guidelines.</p> <p>Navigate to specific API sections using the cards above, or explore the auto-generated documentation for complete details on all classes and methods.</p>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>horus<ul> <li>bridge<ul> <li>robot_registry</li> <li>ros1</li> <li>ros2</li> <li>unity_tcp</li> </ul> </li> <li>client</li> <li>color<ul> <li>color_manager</li> </ul> </li> <li>core<ul> <li>event_bus</li> <li>exceptions</li> <li>topic_map</li> </ul> </li> <li>dataviz<ul> <li>dataviz</li> </ul> </li> <li>plugins<ul> <li>rosbot</li> </ul> </li> <li>robot<ul> <li>dataviz</li> <li>robot</li> <li>status</li> <li>task</li> <li>teleop</li> </ul> </li> <li>sensors<ul> <li>sensors</li> </ul> </li> <li>topics</li> <li>utils<ul> <li>backend_manager</li> <li>branding</li> <li>logging</li> <li>requirements_checker</li> <li>spinner</li> <li>unity_monitor</li> </ul> </li> </ul> </li> <li>setup</li> <li>tests<ul> <li>test_robot</li> </ul> </li> </ul>"},{"location":"api/setup/","title":"Setup","text":""},{"location":"api/setup/#setup","title":"setup","text":""},{"location":"api/horus/","title":"Index","text":""},{"location":"api/horus/#horus","title":"horus","text":"<p>HORUS Mixed Reality Robot Management SDK</p>"},{"location":"api/horus/#horus.Client","title":"Client","text":"<pre><code>Client(backend='ros2', auto_launch=True)\n</code></pre> Source code in <code>horus/client.py</code> <pre><code>def __init__(self, backend=\"ros2\", auto_launch=True):\n    self.backend_type = backend\n    self.auto_launch = auto_launch\n    self.backend_manager = BackendManager(backend)\n    self.requirements_checker = RequirementsChecker()\n    self.unity_monitor = UnityConnectionMonitor()\n    self._shutdown_called = False  # Prevent duplicate shutdowns\n\n    # Initialize with backend management\n    self._initialize_with_backend()\n</code></pre>"},{"location":"api/horus/#horus.Client.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Clean shutdown of client and monitoring</p> Source code in <code>horus/client.py</code> <pre><code>def shutdown(self):\n    \"\"\"Clean shutdown of client and monitoring\"\"\"\n    # Prevent duplicate shutdown calls\n    if self._shutdown_called:\n        return\n    self._shutdown_called = True\n\n    print(\"\\n\\033[96mShutting down HORUS SDK...\\033[0m\")\n\n    # Stop Unity connection monitoring\n    if hasattr(self, \"unity_monitor\"):\n        print(\"\\033[90m  Stopping Unity connection monitoring...\\033[0m\")\n        self.unity_monitor.stop_monitoring()\n        print(\"\\033[90m  \u2713 Unity monitoring stopped\\033[0m\")\n\n    # Stop backend and all ROS2 processes\n    if hasattr(self, \"backend_manager\"):\n        self.backend_manager.stop_backend()\n\n    print(\"\\033[92m  \u2713 HORUS SDK shutdown complete\\033[0m\")\n</code></pre>"},{"location":"api/horus/#horus.ColorManager","title":"ColorManager","text":"<pre><code>ColorManager(\n    color_scheme: ColorScheme = BRIGHT,\n    seed: Optional[int] = None,\n)\n</code></pre> <p>Manages unique color assignment for robots and their visualizations</p> <p>Parameters:</p> Name Type Description Default <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme to use for assignments</p> <code>BRIGHT</code> <code>seed</code> <code>Optional[int]</code> <p>Random seed for reproducible color generation</p> <code>None</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def __init__(\n    self, color_scheme: ColorScheme = ColorScheme.BRIGHT, seed: Optional[int] = None\n):\n    \"\"\"\n    Initialize color manager\n\n    Args:\n        color_scheme: Color scheme to use for assignments\n        seed: Random seed for reproducible color generation\n    \"\"\"\n    self.color_scheme = color_scheme\n    self.robot_colors: Dict[str, RGBColor] = {}\n    self.used_colors: List[str] = []\n    self.color_index = 0\n\n    # Set random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Select color palette based on scheme\n    self.palette = self._get_palette_for_scheme(color_scheme)\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_robot_color","title":"get_robot_color","text":"<pre><code>get_robot_color(robot_name: str) -&gt; RGBColor\n</code></pre> <p>Get or assign a unique color for a robot</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <p>Returns:</p> Type Description <code>RGBColor</code> <p>RGBColor assigned to the robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_robot_color(self, robot_name: str) -&gt; RGBColor:\n    \"\"\"\n    Get or assign a unique color for a robot\n\n    Args:\n        robot_name: Name of the robot\n\n    Returns:\n        RGBColor assigned to the robot\n    \"\"\"\n    if robot_name in self.robot_colors:\n        return self.robot_colors[robot_name]\n\n    # Assign new color\n    color = self._assign_new_color(robot_name)\n    self.robot_colors[robot_name] = color\n    return color\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_laser_scan_color","title":"get_laser_scan_color","text":"<pre><code>get_laser_scan_color(\n    robot_name: str, alpha: float = 0.8\n) -&gt; RGBColor\n</code></pre> <p>Get color for laser scan visualization with specified alpha</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_laser_scan_color(self, robot_name: str, alpha: float = 0.8) -&gt; RGBColor:\n    \"\"\"Get color for laser scan visualization with specified alpha\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_path_color","title":"get_path_color","text":"<pre><code>get_path_color(\n    robot_name: str,\n    path_type: str = \"global\",\n    alpha: float = 0.9,\n) -&gt; RGBColor\n</code></pre> <p>Get color for path visualization</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <code>path_type</code> <code>str</code> <p>Type of path (\"global\" or \"local\")</p> <code>'global'</code> <code>alpha</code> <code>float</code> <p>Alpha transparency value</p> <code>0.9</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_path_color(\n    self, robot_name: str, path_type: str = \"global\", alpha: float = 0.9\n) -&gt; RGBColor:\n    \"\"\"\n    Get color for path visualization\n\n    Args:\n        robot_name: Name of the robot\n        path_type: Type of path (\"global\" or \"local\")\n        alpha: Alpha transparency value\n    \"\"\"\n    base_color = self.get_robot_color(robot_name)\n\n    if path_type == \"local\":\n        # Make local path slightly lighter/more transparent\n        alpha = min(alpha * 0.7, 1.0)\n        # Lighten the color for local paths\n        r = min(base_color.r + 50, 255)\n        g = min(base_color.g + 50, 255)\n        b = min(base_color.b + 50, 255)\n        return RGBColor(r, g, b, alpha)\n    else:\n        # Global path uses base color\n        return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_transform_color","title":"get_transform_color","text":"<pre><code>get_transform_color(\n    robot_name: str, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Get color for robot transform/coordinate frame visualization</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_transform_color(self, robot_name: str, alpha: float = 1.0) -&gt; RGBColor:\n    \"\"\"Get color for robot transform/coordinate frame visualization\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.reset_robot_color","title":"reset_robot_color","text":"<pre><code>reset_robot_color(robot_name: str) -&gt; None\n</code></pre> <p>Reset color assignment for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def reset_robot_color(self, robot_name: str) -&gt; None:\n    \"\"\"Reset color assignment for a specific robot\"\"\"\n    if robot_name in self.robot_colors:\n        del self.robot_colors[robot_name]\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.clear_all_colors","title":"clear_all_colors","text":"<pre><code>clear_all_colors() -&gt; None\n</code></pre> <p>Clear all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def clear_all_colors(self) -&gt; None:\n    \"\"\"Clear all color assignments\"\"\"\n    self.robot_colors.clear()\n    self.used_colors.clear()\n    self.color_index = 0\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_all_robot_colors","title":"get_all_robot_colors","text":"<pre><code>get_all_robot_colors() -&gt; Dict[str, RGBColor]\n</code></pre> <p>Get all assigned robot colors</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_all_robot_colors(self) -&gt; Dict[str, RGBColor]:\n    \"\"\"Get all assigned robot colors\"\"\"\n    return self.robot_colors.copy()\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.set_robot_color","title":"set_robot_color","text":"<pre><code>set_robot_color(robot_name: str, color: RGBColor) -&gt; None\n</code></pre> <p>Manually set color for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def set_robot_color(self, robot_name: str, color: RGBColor) -&gt; None:\n    \"\"\"Manually set color for a specific robot\"\"\"\n    self.robot_colors[robot_name] = color\n</code></pre>"},{"location":"api/horus/#horus.ColorManager.get_color_summary","title":"get_color_summary","text":"<pre><code>get_color_summary() -&gt; Dict[str, str]\n</code></pre> <p>Get summary of all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_color_summary(self) -&gt; Dict[str, str]:\n    \"\"\"Get summary of all color assignments\"\"\"\n    return {robot: color.to_hex() for robot, color in self.robot_colors.items()}\n</code></pre>"},{"location":"api/horus/#horus.ColorScheme","title":"ColorScheme","text":"<p>               Bases: <code>Enum</code></p> <p>Predefined color schemes for robot visualizations</p>"},{"location":"api/horus/#horus.RGBColor","title":"RGBColor  <code>dataclass</code>","text":"<pre><code>RGBColor(r: int, g: int, b: int, a: float = 1.0)\n</code></pre> <p>RGB color representation</p>"},{"location":"api/horus/#horus.RGBColor.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Convert to hex string (#RRGGBB)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Convert to hex string (#RRGGBB)\"\"\"\n    return f\"#{self.r:02x}{self.g:02x}{self.b:02x}\"\n</code></pre>"},{"location":"api/horus/#horus.RGBColor.to_rgba_tuple","title":"to_rgba_tuple","text":"<pre><code>to_rgba_tuple() -&gt; Tuple[int, int, int, float]\n</code></pre> <p>Convert to RGBA tuple</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_rgba_tuple(self) -&gt; Tuple[int, int, int, float]:\n    \"\"\"Convert to RGBA tuple\"\"\"\n    return (self.r, self.g, self.b, self.a)\n</code></pre>"},{"location":"api/horus/#horus.RGBColor.to_normalized_tuple","title":"to_normalized_tuple","text":"<pre><code>to_normalized_tuple() -&gt; Tuple[float, float, float, float]\n</code></pre> <p>Convert to normalized RGBA tuple (0.0-1.0)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_normalized_tuple(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Convert to normalized RGBA tuple (0.0-1.0)\"\"\"\n    return (self.r / 255.0, self.g / 255.0, self.b / 255.0, self.a)\n</code></pre>"},{"location":"api/horus/#horus.RGBColor.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(hex_color: str, alpha: float = 1.0) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from hex string</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hex(cls, hex_color: str, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from hex string\"\"\"\n    hex_color = hex_color.lstrip(\"#\")\n    if len(hex_color) != 6:\n        raise ValueError(\"Hex color must be 6 characters\")\n\n    r = int(hex_color[0:2], 16)\n    g = int(hex_color[2:4], 16)\n    b = int(hex_color[4:6], 16)\n\n    return cls(r, g, b, alpha)\n</code></pre>"},{"location":"api/horus/#horus.RGBColor.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    h: float, s: float, v: float, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from HSV values (h: 0-360, s,v: 0-1)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from HSV values (h: 0-360, s,v: 0-1)\"\"\"\n    import colorsys\n\n    r, g, b = colorsys.hsv_to_rgb(h / 360.0, s, v)\n    return cls(int(r * 255), int(g * 255), int(b * 255), alpha)\n</code></pre>"},{"location":"api/horus/#horus.DataSourceType","title":"DataSourceType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data sources for visualization</p>"},{"location":"api/horus/#horus.DataViz","title":"DataViz  <code>dataclass</code>","text":"<pre><code>DataViz(\n    name: str,\n    visualizations: List[VisualizationConfig] = list(),\n    color_manager: Optional[Any] = None,\n)\n</code></pre> <p>Data visualization manager for robot sensors and environmental data</p> <p>This class can manage visualizations for: - Robot-specific data (sensors, transforms, paths) - Robot-independent data (maps, global markers, TF tree) - Mixed scenarios with multiple robots and shared data</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name/identifier for this visualization collection</p> required <code>visualizations</code> <code>List[VisualizationConfig]</code> <p>List of visualization configurations</p> <code>list()</code> <code>color_manager</code> <code>Optional[Any]</code> <p>Color management system for unique robot colors</p> <code>None</code>"},{"location":"api/horus/#horus.DataViz.add_sensor_visualization","title":"add_sensor_visualization","text":"<pre><code>add_sensor_visualization(\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add a sensor-based visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_sensor_visualization(\n    self,\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a sensor-based visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Create sensor data source\n    data_source = SensorDataSource(sensor, robot_name=robot_name)\n\n    # Determine visualization type\n    viz_type = self._get_viz_type_for_sensor(sensor)\n\n    # Auto-assign color based on sensor type and robot\n    if \"color\" not in render_options:\n        if viz_type == VisualizationType.LASER_SCAN:\n            color = self.color_manager.get_laser_scan_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n            render_options[\"alpha\"] = color.a\n        else:\n            # For other sensors, use base robot color\n            color = self.color_manager.get_robot_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n\n    # Create and add visualization\n    viz_config = VisualizationConfig(\n        viz_type=viz_type, data_source=data_source, render_options=render_options\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_robot_transform","title":"add_robot_transform","text":"<pre><code>add_robot_transform(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot transform visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_transform(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot transform visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color if not specified\n    if \"color\" not in render_options:\n        color = self.color_manager.get_transform_color(robot_name)\n        render_options[\"color\"] = color.to_hex()\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_transform\",\n        source_type=DataSourceType.ROBOT_TRANSFORM,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.COORDINATE_AXES,\n        data_source=data_source,\n        render_options=render_options,\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_robot_global_path","title":"add_robot_global_path","text":"<pre><code>add_robot_global_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot global path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_global_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot global path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for global path\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"global\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 3)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_global_path\",\n        source_type=DataSourceType.ROBOT_GLOBAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=3,  # Global paths on top of maps\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_robot_local_path","title":"add_robot_local_path","text":"<pre><code>add_robot_local_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot local path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_local_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot local path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for local path (lighter than global)\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"local\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 2)\n        render_options[\"line_style\"] = render_options.get(\"line_style\", \"dashed\")\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_local_path\",\n        source_type=DataSourceType.ROBOT_LOCAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=4,  # Local paths on top of global paths\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_robot_trajectory","title":"add_robot_trajectory","text":"<pre><code>add_robot_trajectory(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot trajectory visualization (executed path history)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_trajectory(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot trajectory visualization (executed path history)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for trajectory (even more transparent)\n    if \"color\" not in render_options:\n        base_color = self.color_manager.get_robot_color(robot_name)\n        render_options[\"color\"] = base_color.to_hex()\n        render_options[\"alpha\"] = 0.5  # More transparent for history\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 1)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_trajectory\",\n        source_type=DataSourceType.ROBOT_TRAJECTORY,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRAJECTORY,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=1,  # Trajectories in background\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_occupancy_grid","title":"add_occupancy_grid","text":"<pre><code>add_occupancy_grid(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add occupancy grid map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_occupancy_grid(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add occupancy grid map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"occupancy_grid\",\n        source_type=DataSourceType.OCCUPANCY_GRID,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.OCCUPANCY_GRID,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-10,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_3d_map","title":"add_3d_map","text":"<pre><code>add_3d_map(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add 3D map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_3d_map(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add 3D map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"map_3d\",\n        source_type=DataSourceType.MAP_3D,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.POINT_CLOUD,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-5,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_global_navigation_path","title":"add_global_navigation_path","text":"<pre><code>add_global_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (robot-independent)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_global_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (robot-independent)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Default styling for global navigation paths\n    if \"color\" not in render_options:\n        render_options[\"color\"] = \"#00FF00\"  # Green for global navigation\n    if \"line_width\" not in render_options:\n        render_options[\"line_width\"] = 4\n    if \"alpha\" not in render_options:\n        render_options[\"alpha\"] = 0.8\n\n    data_source = EnvironmentDataSource(\n        name=\"global_navigation_path\",\n        source_type=DataSourceType.GLOBAL_NAVIGATION_PATH,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=5,  # Foreground layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_navigation_path","title":"add_navigation_path","text":"<pre><code>add_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (alias for add_global_navigation_path)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (alias for\n    add_global_navigation_path)\"\"\"\n    return self.add_global_navigation_path(topic, frame_id, render_options)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.add_tf_tree","title":"add_tf_tree","text":"<pre><code>add_tf_tree(\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add TF tree visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_tf_tree(\n    self,\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add TF tree visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"tf_tree\",\n        source_type=DataSourceType.TF_TREE,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRANSFORM_TREE,\n        data_source=data_source,\n        render_options=render_options or {},\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.get_robot_visualizations","title":"get_robot_visualizations","text":"<pre><code>get_robot_visualizations(\n    robot_name: str,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_robot_visualizations(self, robot_name: str) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations for a specific robot\"\"\"\n    return [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name == robot_name\n    ]\n</code></pre>"},{"location":"api/horus/#horus.DataViz.get_global_visualizations","title":"get_global_visualizations","text":"<pre><code>get_global_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all robot-independent visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_global_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all robot-independent visualizations\"\"\"\n    return [viz for viz in self.visualizations if not viz.is_robot_specific()]\n</code></pre>"},{"location":"api/horus/#horus.DataViz.get_visualizations_by_type","title":"get_visualizations_by_type","text":"<pre><code>get_visualizations_by_type(\n    viz_type: VisualizationType,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations of a specific type</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_visualizations_by_type(\n    self, viz_type: VisualizationType\n) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations of a specific type\"\"\"\n    return [viz for viz in self.visualizations if viz.viz_type == viz_type]\n</code></pre>"},{"location":"api/horus/#horus.DataViz.get_enabled_visualizations","title":"get_enabled_visualizations","text":"<pre><code>get_enabled_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all enabled visualizations sorted by layer priority</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_enabled_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all enabled visualizations sorted by layer priority\"\"\"\n    enabled = [viz for viz in self.visualizations if viz.enabled]\n    return sorted(enabled, key=lambda v: v.layer_priority, reverse=True)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.enable_robot_visualizations","title":"enable_robot_visualizations","text":"<pre><code>enable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Enable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def enable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Enable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = True\n</code></pre>"},{"location":"api/horus/#horus.DataViz.disable_robot_visualizations","title":"disable_robot_visualizations","text":"<pre><code>disable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Disable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def disable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Disable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = False\n</code></pre>"},{"location":"api/horus/#horus.DataViz.remove_robot_visualizations","title":"remove_robot_visualizations","text":"<pre><code>remove_robot_visualizations(robot_name: str) -&gt; int\n</code></pre> <p>Remove all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def remove_robot_visualizations(self, robot_name: str) -&gt; int:\n    \"\"\"Remove all visualizations for a specific robot\"\"\"\n    initial_count = len(self.visualizations)\n    self.visualizations = [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name != robot_name\n    ]\n    return initial_count - len(self.visualizations)\n</code></pre>"},{"location":"api/horus/#horus.DataViz.get_summary","title":"get_summary","text":"<pre><code>get_summary() -&gt; Dict[str, Any]\n</code></pre> <p>Get a comprehensive summary of all visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_summary(self) -&gt; Dict[str, Any]:\n    \"\"\"Get a comprehensive summary of all visualizations\"\"\"\n    summary: Dict[str, Any] = {\n        \"name\": self.name,\n        \"total_visualizations\": len(self.visualizations),\n        \"enabled_visualizations\": len(self.get_enabled_visualizations()),\n        \"robot_specific\": len(\n            [v for v in self.visualizations if v.is_robot_specific()]\n        ),\n        \"global\": len(self.get_global_visualizations()),\n        \"by_robot\": {},\n        \"by_type\": {},\n        \"by_data_source\": {},\n    }\n\n    # Group by robot\n    for viz in self.visualizations:\n        if viz.is_robot_specific():\n            robot = viz.data_source.robot_name\n            if robot not in summary[\"by_robot\"]:\n                summary[\"by_robot\"][robot] = 0\n            summary[\"by_robot\"][robot] += 1\n\n    # Group by visualization type\n    for viz in self.visualizations:\n        viz_type = viz.viz_type.value\n        if viz_type not in summary[\"by_type\"]:\n            summary[\"by_type\"][viz_type] = 0\n        summary[\"by_type\"][viz_type] += 1\n\n    # Group by data source type\n    for viz in self.visualizations:\n        source_type = viz.data_source.source_type.value\n        if source_type not in summary[\"by_data_source\"]:\n            summary[\"by_data_source\"][source_type] = 0\n        summary[\"by_data_source\"][source_type] += 1\n\n    return summary\n</code></pre>"},{"location":"api/horus/#horus.VisualizationType","title":"VisualizationType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data visualization rendering</p>"},{"location":"api/horus/#horus.Robot","title":"Robot  <code>dataclass</code>","text":"<pre><code>Robot(\n    name: str,\n    robot_type: RobotType,\n    metadata: Optional[Dict[str, Any]] = None,\n    sensors: List[SensorInstance] = list(),\n)\n</code></pre> <p>Base robot object with type and identification</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Robot identifier/namespace (unique)</p> required <code>robot_type</code> <code>RobotType</code> <p>Classification of robot (wheeled, legged, aerial)</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional robot information</p> <code>None</code> <code>sensors</code> <code>List[SensorInstance]</code> <p>List of sensors attached to this robot</p> <code>list()</code>"},{"location":"api/horus/#horus.Robot.get_type_str","title":"get_type_str","text":"<pre><code>get_type_str() -&gt; str\n</code></pre> <p>Get robot type as string</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_type_str(self) -&gt; str:\n    \"\"\"Get robot type as string\"\"\"\n    return self.robot_type.value\n</code></pre>"},{"location":"api/horus/#horus.Robot.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to the robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to the robot\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/#horus.Robot.add_sensor","title":"add_sensor","text":"<pre><code>add_sensor(sensor: SensorInstance) -&gt; None\n</code></pre> <p>Add a sensor to this robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_sensor(self, sensor: \"SensorInstance\") -&gt; None:\n    \"\"\"Add a sensor to this robot\"\"\"\n    # Check if sensor with same name already exists\n    for existing_sensor in self.sensors:\n        if existing_sensor.name == sensor.name:\n            raise ValueError(f\"Sensor with name '{sensor.name}' already exists\")\n\n    self.sensors.append(sensor)\n</code></pre>"},{"location":"api/horus/#horus.Robot.remove_sensor","title":"remove_sensor","text":"<pre><code>remove_sensor(sensor_name: str) -&gt; bool\n</code></pre> <p>Remove a sensor by name. Returns True if sensor was found and removed.</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def remove_sensor(self, sensor_name: str) -&gt; bool:\n    \"\"\"Remove a sensor by name. Returns True if sensor was found and removed.\"\"\"\n    for i, sensor in enumerate(self.sensors):\n        if sensor.name == sensor_name:\n            del self.sensors[i]\n            return True\n    return False\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_sensor","title":"get_sensor","text":"<pre><code>get_sensor(sensor_name: str) -&gt; Optional[SensorInstance]\n</code></pre> <p>Get sensor by name</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor(self, sensor_name: str) -&gt; Optional[\"SensorInstance\"]:\n    \"\"\"Get sensor by name\"\"\"\n    for sensor in self.sensors:\n        if sensor.name == sensor_name:\n            return sensor\n    return None\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_sensors_by_type","title":"get_sensors_by_type","text":"<pre><code>get_sensors_by_type(\n    sensor_type: SensorType,\n) -&gt; List[SensorInstance]\n</code></pre> <p>Get all sensors of a specific type</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensors_by_type(self, sensor_type: \"SensorType\") -&gt; List[\"SensorInstance\"]:\n    \"\"\"Get all sensors of a specific type\"\"\"\n    return [sensor for sensor in self.sensors if sensor.sensor_type == sensor_type]\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_sensor_count","title":"get_sensor_count","text":"<pre><code>get_sensor_count() -&gt; int\n</code></pre> <p>Get total number of sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor_count(self) -&gt; int:\n    \"\"\"Get total number of sensors\"\"\"\n    return len(self.sensors)\n</code></pre>"},{"location":"api/horus/#horus.Robot.has_sensors","title":"has_sensors","text":"<pre><code>has_sensors() -&gt; bool\n</code></pre> <p>Check if robot has any sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def has_sensors(self) -&gt; bool:\n    \"\"\"Check if robot has any sensors\"\"\"\n    return len(self.sensors) &gt; 0\n</code></pre>"},{"location":"api/horus/#horus.Robot.create_dataviz","title":"create_dataviz","text":"<pre><code>create_dataviz(\n    dataviz_name: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a DataViz instance for this robot with all its sensors</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance (defaults to robot name +          \"_viz\")</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance configured with this robot's sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_dataviz(self, dataviz_name: Optional[str] = None) -&gt; \"DataViz\":\n    \"\"\"\n    Create a DataViz instance for this robot with all its sensors\n\n    Args:\n        dataviz_name: Name for the DataViz instance (defaults to robot name +\n                     \"_viz\")\n\n    Returns:\n        DataViz instance configured with this robot's sensors\n    \"\"\"\n    from ..dataviz import DataViz\n\n    if dataviz_name is None:\n        dataviz_name = f\"{self.name}_viz\"\n\n    # Create DataViz instance\n    dataviz = DataViz(name=dataviz_name)\n\n    # Add all robot sensors to DataViz\n    for sensor in self.sensors:\n        dataviz.add_sensor_visualization(sensor, self.name)\n\n    # Add robot transform visualization\n    dataviz.add_robot_transform(\n        robot_name=self.name,\n        topic=f\"/{self.name}/tf\",\n        frame_id=f\"{self.name}_base_link\",\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/#horus.Robot.add_path_planning_to_dataviz","title":"add_path_planning_to_dataviz","text":"<pre><code>add_path_planning_to_dataviz(\n    dataviz: DataViz,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Add path planning visualizations to a DataViz instance</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>DataViz</code> <p>DataViz instance to add visualizations to</p> required <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning (optional)</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning (optional)</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory (optional)</p> <code>None</code> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_path_planning_to_dataviz(\n    self,\n    dataviz: \"DataViz\",\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    Add path planning visualizations to a DataViz instance\n\n    Args:\n        dataviz: DataViz instance to add visualizations to\n        global_path_topic: Topic for global path planning (optional)\n        local_path_topic: Topic for local path planning (optional)\n        trajectory_topic: Topic for executed trajectory (optional)\n    \"\"\"\n    # Add global path if topic provided\n    if global_path_topic:\n        dataviz.add_robot_global_path(\n            robot_name=self.name, topic=global_path_topic, frame_id=\"map\"\n        )\n\n    # Add local path if topic provided\n    if local_path_topic:\n        dataviz.add_robot_local_path(\n            robot_name=self.name, topic=local_path_topic, frame_id=\"map\"\n        )\n\n    # Add trajectory if topic provided\n    if trajectory_topic:\n        dataviz.add_robot_trajectory(\n            robot_name=self.name, topic=trajectory_topic, frame_id=\"map\"\n        )\n</code></pre>"},{"location":"api/horus/#horus.Robot.create_full_dataviz","title":"create_full_dataviz","text":"<pre><code>create_full_dataviz(\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a complete DataViz instance with sensors and path planning</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance</p> <code>None</code> <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance with sensors and path planning configured</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_full_dataviz(\n    self,\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; \"DataViz\":\n    \"\"\"\n    Create a complete DataViz instance with sensors and path planning\n\n    Args:\n        dataviz_name: Name for the DataViz instance\n        global_path_topic: Topic for global path planning\n        local_path_topic: Topic for local path planning\n        trajectory_topic: Topic for executed trajectory\n\n    Returns:\n        DataViz instance with sensors and path planning configured\n    \"\"\"\n    # Create base DataViz with sensors\n    dataviz = self.create_dataviz(dataviz_name)\n\n    # Add path planning visualizations\n    self.add_path_planning_to_dataviz(\n        dataviz, global_path_topic, local_path_topic, trajectory_topic\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/#horus.Robot.register_with_horus","title":"register_with_horus","text":"<pre><code>register_with_horus(\n    dataviz: Optional[DataViz] = None,\n) -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Register this robot with the HORUS backend system</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>Optional[DataViz]</code> <p>DataViz instance (creates one if not provided)</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, registration_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def register_with_horus(\n    self, dataviz: Optional[\"DataViz\"] = None\n) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Register this robot with the HORUS backend system\n\n    Args:\n        dataviz: DataViz instance (creates one if not provided)\n\n    Returns:\n        Tuple of (success, registration_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    # Create DataViz if not provided\n    if dataviz is None:\n        dataviz = self.create_dataviz()\n\n    # Create registry client and register\n    registry = RobotRegistryClient()\n    success, result = registry.register_robot(self, dataviz)\n\n    if success:\n        # Store registration data\n        self.add_metadata(\"horus_robot_id\", result.get(\"robot_id\"))\n        self.add_metadata(\"horus_color\", result.get(\"assigned_color\"))\n        self.add_metadata(\"horus_registered\", True)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/#horus.Robot.unregister_from_horus","title":"unregister_from_horus","text":"<pre><code>unregister_from_horus() -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Unregister this robot from the HORUS backend system</p> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, result_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def unregister_from_horus(self) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Unregister this robot from the HORUS backend system\n\n    Returns:\n        Tuple of (success, result_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    robot_id = self.get_metadata(\"horus_robot_id\")\n    if not robot_id:\n        return False, {\"error\": \"Robot not registered with HORUS\"}\n\n    # Create registry client and unregister\n    registry = RobotRegistryClient()\n    success, result = registry.unregister_robot(robot_id)\n\n    if success:\n        # Clear registration data\n        self.add_metadata(\"horus_robot_id\", None)\n        self.add_metadata(\"horus_color\", None)\n        self.add_metadata(\"horus_registered\", False)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/#horus.Robot.is_registered_with_horus","title":"is_registered_with_horus","text":"<pre><code>is_registered_with_horus() -&gt; bool\n</code></pre> <p>Check if robot is registered with HORUS system</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def is_registered_with_horus(self) -&gt; bool:\n    \"\"\"Check if robot is registered with HORUS system\"\"\"\n    return bool(self.get_metadata(\"horus_registered\", False))\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_horus_id","title":"get_horus_id","text":"<pre><code>get_horus_id() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned robot ID</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_id(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned robot ID\"\"\"\n    result = self.get_metadata(\"horus_robot_id\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/#horus.Robot.get_horus_color","title":"get_horus_color","text":"<pre><code>get_horus_color() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned color</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_color(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned color\"\"\"\n    result = self.get_metadata(\"horus_color\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/#horus.RobotType","title":"RobotType","text":"<p>               Bases: <code>Enum</code></p> <p>Robot type classifications</p>"},{"location":"api/horus/#horus.Camera","title":"Camera  <code>dataclass</code>","text":"<pre><code>Camera(\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>Camera sensor with vision-specific properties</p> <p>Parameters:</p> Name Type Description Default <code>is_stereo</code> <code>bool</code> <p>Whether camera is stereo (dual camera)</p> <code>False</code> <code>resolution</code> <code>tuple[int, int]</code> <p>Camera resolution as (width, height)</p> <code>(640, 480)</code> <code>fps</code> <code>int</code> <p>Frames per second</p> <code>30</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>encoding</code> <code>str</code> <p>Image encoding format</p> <code>'bgr8'</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs,\n):\n    super().__init__(name, SensorType.CAMERA, frame_id, topic, **kwargs)\n    self.is_stereo = is_stereo\n    self.resolution = resolution\n    self.fps = fps\n    self.fov = fov\n    self.encoding = encoding\n</code></pre>"},{"location":"api/horus/#horus.Camera.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/#horus.Camera.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/#horus.Camera.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/#horus.Camera.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/#horus.Camera.get_camera_type","title":"get_camera_type","text":"<pre><code>get_camera_type() -&gt; str\n</code></pre> <p>Get camera type as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_camera_type(self) -&gt; str:\n    \"\"\"Get camera type as string\"\"\"\n    return \"stereo\" if self.is_stereo else \"mono\"\n</code></pre>"},{"location":"api/horus/#horus.Camera.get_resolution_str","title":"get_resolution_str","text":"<pre><code>get_resolution_str() -&gt; str\n</code></pre> <p>Get resolution as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_resolution_str(self) -&gt; str:\n    \"\"\"Get resolution as string\"\"\"\n    return f\"{self.resolution[0]}x{self.resolution[1]}\"\n</code></pre>"},{"location":"api/horus/#horus.LaserScan","title":"LaserScan  <code>dataclass</code>","text":"<pre><code>LaserScan(\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>2D Laser scanner sensor</p> <p>Parameters:</p> Name Type Description Default <code>min_angle</code> <code>float</code> <p>Minimum scan angle in radians</p> <code>-3.14159</code> <code>max_angle</code> <code>float</code> <p>Maximum scan angle in radians</p> <code>3.14159</code> <code>angle_increment</code> <code>float</code> <p>Angular resolution in radians</p> <code>0.005</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.1</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>30.0</code> <code>range_resolution</code> <code>float</code> <p>Range resolution in meters</p> <code>0.01</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LASER_SCAN, frame_id, topic, **kwargs)\n    self.min_angle = min_angle\n    self.max_angle = max_angle\n    self.angle_increment = angle_increment\n    self.min_range = min_range\n    self.max_range = max_range\n    self.range_resolution = range_resolution\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.get_scan_range_degrees","title":"get_scan_range_degrees","text":"<pre><code>get_scan_range_degrees() -&gt; float\n</code></pre> <p>Get scan range in degrees</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_scan_range_degrees(self) -&gt; float:\n    \"\"\"Get scan range in degrees\"\"\"\n    return (self.max_angle - self.min_angle) * 180.0 / 3.14159\n</code></pre>"},{"location":"api/horus/#horus.LaserScan.get_num_points","title":"get_num_points","text":"<pre><code>get_num_points() -&gt; int\n</code></pre> <p>Get approximate number of scan points</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_num_points(self) -&gt; int:\n    \"\"\"Get approximate number of scan points\"\"\"\n    return int((self.max_angle - self.min_angle) / self.angle_increment)\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D","title":"Lidar3D  <code>dataclass</code>","text":"<pre><code>Lidar3D(\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>3D LiDAR sensor</p> <p>Parameters:</p> Name Type Description Default <code>vertical_fov</code> <code>float</code> <p>Vertical field of view in degrees</p> <code>40.0</code> <code>horizontal_fov</code> <code>float</code> <p>Horizontal field of view in degrees</p> <code>360.0</code> <code>vertical_resolution</code> <code>float</code> <p>Vertical angular resolution in degrees</p> <code>0.4</code> <code>horizontal_resolution</code> <code>float</code> <p>Horizontal angular resolution in degrees</p> <code>0.4</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.5</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>100.0</code> <code>points_per_second</code> <code>int</code> <p>Points per second capability</p> <code>1000000</code> <code>num_layers</code> <code>int</code> <p>Number of vertical layers/channels</p> <code>64</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LIDAR_3D, frame_id, topic, **kwargs)\n    self.vertical_fov = vertical_fov\n    self.horizontal_fov = horizontal_fov\n    self.vertical_resolution = vertical_resolution\n    self.horizontal_resolution = horizontal_resolution\n    self.min_range = min_range\n    self.max_range = max_range\n    self.points_per_second = points_per_second\n    self.num_layers = num_layers\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.get_point_cloud_size","title":"get_point_cloud_size","text":"<pre><code>get_point_cloud_size() -&gt; int\n</code></pre> <p>Get approximate point cloud size</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_point_cloud_size(self) -&gt; int:\n    \"\"\"Get approximate point cloud size\"\"\"\n    h_points = int(self.horizontal_fov / self.horizontal_resolution)\n    v_points = int(self.vertical_fov / self.vertical_resolution)\n    return h_points * v_points\n</code></pre>"},{"location":"api/horus/#horus.Lidar3D.get_lidar_type","title":"get_lidar_type","text":"<pre><code>get_lidar_type() -&gt; str\n</code></pre> <p>Get LiDAR type description</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_lidar_type(self) -&gt; str:\n    \"\"\"Get LiDAR type description\"\"\"\n    return f\"{self.num_layers}-layer 3D LiDAR\"\n</code></pre>"},{"location":"api/horus/#horus.SensorType","title":"SensorType","text":"<p>               Bases: <code>Enum</code></p> <p>Sensor type classifications</p>"},{"location":"api/horus/client/","title":"Client","text":""},{"location":"api/horus/client/#horus.client","title":"horus.client","text":""},{"location":"api/horus/client/#horus.client.Client","title":"Client","text":"<pre><code>Client(backend='ros2', auto_launch=True)\n</code></pre> Source code in <code>horus/client.py</code> <pre><code>def __init__(self, backend=\"ros2\", auto_launch=True):\n    self.backend_type = backend\n    self.auto_launch = auto_launch\n    self.backend_manager = BackendManager(backend)\n    self.requirements_checker = RequirementsChecker()\n    self.unity_monitor = UnityConnectionMonitor()\n    self._shutdown_called = False  # Prevent duplicate shutdowns\n\n    # Initialize with backend management\n    self._initialize_with_backend()\n</code></pre>"},{"location":"api/horus/client/#horus.client.Client.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Clean shutdown of client and monitoring</p> Source code in <code>horus/client.py</code> <pre><code>def shutdown(self):\n    \"\"\"Clean shutdown of client and monitoring\"\"\"\n    # Prevent duplicate shutdown calls\n    if self._shutdown_called:\n        return\n    self._shutdown_called = True\n\n    print(\"\\n\\033[96mShutting down HORUS SDK...\\033[0m\")\n\n    # Stop Unity connection monitoring\n    if hasattr(self, \"unity_monitor\"):\n        print(\"\\033[90m  Stopping Unity connection monitoring...\\033[0m\")\n        self.unity_monitor.stop_monitoring()\n        print(\"\\033[90m  \u2713 Unity monitoring stopped\\033[0m\")\n\n    # Stop backend and all ROS2 processes\n    if hasattr(self, \"backend_manager\"):\n        self.backend_manager.stop_backend()\n\n    print(\"\\033[92m  \u2713 HORUS SDK shutdown complete\\033[0m\")\n</code></pre>"},{"location":"api/horus/topics/","title":"Topics","text":""},{"location":"api/horus/topics/#horus.topics","title":"horus.topics","text":"<p>stub</p>"},{"location":"api/horus/bridge/","title":"Index","text":""},{"location":"api/horus/bridge/#horus.bridge","title":"horus.bridge","text":""},{"location":"api/horus/bridge/robot_registry/","title":"Robot registry","text":""},{"location":"api/horus/bridge/robot_registry/#horus.bridge.robot_registry","title":"horus.bridge.robot_registry","text":"<p>Robot registry client for HORUS SDK</p> <p>Handles robot registration with the HORUS backend system</p>"},{"location":"api/horus/bridge/robot_registry/#horus.bridge.robot_registry.RobotRegistryClient","title":"RobotRegistryClient","text":"<pre><code>RobotRegistryClient()\n</code></pre> <p>Client for registering robots with HORUS backend</p> Source code in <code>horus/bridge/robot_registry.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize robot registry client\"\"\"\n    self.node = None\n    self.register_client = None\n    self.unregister_client = None\n    self.ros_initialized = False\n\n    if ROS2_AVAILABLE:\n        self._initialize_ros2()\n</code></pre>"},{"location":"api/horus/bridge/robot_registry/#horus.bridge.robot_registry.RobotRegistryClient.register_robot","title":"register_robot","text":"<pre><code>register_robot(\n    robot, dataviz, timeout_sec: float = 10.0\n) -&gt; Tuple[bool, Dict]\n</code></pre> <p>Register robot with HORUS backend</p> <p>Parameters:</p> Name Type Description Default <code>robot</code> <p>Robot instance from SDK</p> required <code>dataviz</code> <p>DataViz instance with visualizations</p> required <code>timeout_sec</code> <code>float</code> <p>Service call timeout</p> <code>10.0</code> <p>Returns:</p> Type Description <code>Tuple[bool, Dict]</code> <p>Tuple of (success, result_data)</p> Source code in <code>horus/bridge/robot_registry.py</code> <pre><code>def register_robot(\n    self, robot, dataviz, timeout_sec: float = 10.0\n) -&gt; Tuple[bool, Dict]:\n    \"\"\"\n    Register robot with HORUS backend\n\n    Args:\n        robot: Robot instance from SDK\n        dataviz: DataViz instance with visualizations\n        timeout_sec: Service call timeout\n\n    Returns:\n        Tuple of (success, result_data)\n    \"\"\"\n    if not self.ros_initialized:\n        return False, {\"error\": \"ROS2 not available\"}\n\n    # Wait for service to be available\n    if not self.register_client.wait_for_service(timeout_sec=5.0):\n        return False, {\"error\": \"Registration service not available\"}\n\n    # Build robot config message\n    config_msg = self._build_robot_config(robot, dataviz)\n\n    # Create service request\n    request = RegisterRobot.Request()\n    request.robot_config = config_msg\n\n    # Call service\n    try:\n        future = self.register_client.call_async(request)\n\n        # Wait for response with timeout\n        start_time = time.time()\n        while rclpy.ok() and not future.done():\n            rclpy.spin_once(self.node, timeout_sec=0.1)\n            if time.time() - start_time &gt; timeout_sec:\n                return False, {\"error\": \"Service call timeout\"}\n\n        if future.done():\n            response = future.result()\n\n            if response.success:\n                return True, {\n                    \"robot_id\": response.robot_id,\n                    \"assigned_color\": response.assigned_color,\n                    \"message\": \"Robot registered successfully\",\n                }\n            else:\n                return False, {\n                    \"error\": response.error_message,\n                    \"validation_errors\": response.validation_errors,\n                }\n\n    except Exception as e:\n        return False, {\"error\": f\"Service call failed: {str(e)}\"}\n\n    return False, {\"error\": \"Unknown registration failure\"}\n</code></pre>"},{"location":"api/horus/bridge/robot_registry/#horus.bridge.robot_registry.RobotRegistryClient.unregister_robot","title":"unregister_robot","text":"<pre><code>unregister_robot(\n    robot_id: str, timeout_sec: float = 10.0\n) -&gt; Tuple[bool, Dict]\n</code></pre> <p>Unregister robot from HORUS backend</p> <p>Parameters:</p> Name Type Description Default <code>robot_id</code> <code>str</code> <p>Robot ID to unregister</p> required <code>timeout_sec</code> <code>float</code> <p>Service call timeout</p> <code>10.0</code> <p>Returns:</p> Type Description <code>Tuple[bool, Dict]</code> <p>Tuple of (success, result_data)</p> Source code in <code>horus/bridge/robot_registry.py</code> <pre><code>def unregister_robot(\n    self, robot_id: str, timeout_sec: float = 10.0\n) -&gt; Tuple[bool, Dict]:\n    \"\"\"\n    Unregister robot from HORUS backend\n\n    Args:\n        robot_id: Robot ID to unregister\n        timeout_sec: Service call timeout\n\n    Returns:\n        Tuple of (success, result_data)\n    \"\"\"\n    if not self.ros_initialized:\n        return False, {\"error\": \"ROS2 not available\"}\n\n    # Wait for service to be available\n    if not self.unregister_client.wait_for_service(timeout_sec=5.0):\n        return False, {\"error\": \"Unregistration service not available\"}\n\n    # Create service request\n    request = UnregisterRobot.Request()\n    request.robot_id = robot_id\n\n    # Call service\n    try:\n        future = self.unregister_client.call_async(request)\n\n        # Wait for response with timeout\n        start_time = time.time()\n        while rclpy.ok() and not future.done():\n            rclpy.spin_once(self.node, timeout_sec=0.1)\n            if time.time() - start_time &gt; timeout_sec:\n                return False, {\"error\": \"Service call timeout\"}\n\n        if future.done():\n            response = future.result()\n\n            if response.success:\n                return True, {\"message\": \"Robot unregistered successfully\"}\n            else:\n                return False, {\"error\": response.error_message}\n\n    except Exception as e:\n        return False, {\"error\": f\"Service call failed: {str(e)}\"}\n\n    return False, {\"error\": \"Unknown unregistration failure\"}\n</code></pre>"},{"location":"api/horus/bridge/robot_registry/#horus.bridge.robot_registry.RobotRegistryClient.check_backend_availability","title":"check_backend_availability","text":"<pre><code>check_backend_availability() -&gt; bool\n</code></pre> <p>Check if HORUS backend is available</p> Source code in <code>horus/bridge/robot_registry.py</code> <pre><code>def check_backend_availability(self) -&gt; bool:\n    \"\"\"Check if HORUS backend is available\"\"\"\n    if not self.ros_initialized:\n        return False\n\n    return bool(\n        self.register_client.service_is_ready()\n        and self.unregister_client.service_is_ready()\n    )\n</code></pre>"},{"location":"api/horus/bridge/ros1/","title":"Ros1","text":""},{"location":"api/horus/bridge/ros1/#horus.bridge.ros1","title":"horus.bridge.ros1","text":"<p>stub</p>"},{"location":"api/horus/bridge/ros2/","title":"Ros2","text":""},{"location":"api/horus/bridge/ros2/#horus.bridge.ros2","title":"horus.bridge.ros2","text":"<p>stub</p>"},{"location":"api/horus/bridge/unity_tcp/","title":"Unity tcp","text":""},{"location":"api/horus/bridge/unity_tcp/#horus.bridge.unity_tcp","title":"horus.bridge.unity_tcp","text":"<p>stub</p>"},{"location":"api/horus/color/","title":"Index","text":""},{"location":"api/horus/color/#horus.color","title":"horus.color","text":"<p>HORUS SDK Color Module</p> <p>Color management and assignment for multi-robot mixed reality visualization.</p>"},{"location":"api/horus/color/#horus.color.ColorManager","title":"ColorManager","text":"<pre><code>ColorManager(\n    color_scheme: ColorScheme = BRIGHT,\n    seed: Optional[int] = None,\n)\n</code></pre> <p>Manages unique color assignment for robots and their visualizations</p> <p>Parameters:</p> Name Type Description Default <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme to use for assignments</p> <code>BRIGHT</code> <code>seed</code> <code>Optional[int]</code> <p>Random seed for reproducible color generation</p> <code>None</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def __init__(\n    self, color_scheme: ColorScheme = ColorScheme.BRIGHT, seed: Optional[int] = None\n):\n    \"\"\"\n    Initialize color manager\n\n    Args:\n        color_scheme: Color scheme to use for assignments\n        seed: Random seed for reproducible color generation\n    \"\"\"\n    self.color_scheme = color_scheme\n    self.robot_colors: Dict[str, RGBColor] = {}\n    self.used_colors: List[str] = []\n    self.color_index = 0\n\n    # Set random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Select color palette based on scheme\n    self.palette = self._get_palette_for_scheme(color_scheme)\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_robot_color","title":"get_robot_color","text":"<pre><code>get_robot_color(robot_name: str) -&gt; RGBColor\n</code></pre> <p>Get or assign a unique color for a robot</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <p>Returns:</p> Type Description <code>RGBColor</code> <p>RGBColor assigned to the robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_robot_color(self, robot_name: str) -&gt; RGBColor:\n    \"\"\"\n    Get or assign a unique color for a robot\n\n    Args:\n        robot_name: Name of the robot\n\n    Returns:\n        RGBColor assigned to the robot\n    \"\"\"\n    if robot_name in self.robot_colors:\n        return self.robot_colors[robot_name]\n\n    # Assign new color\n    color = self._assign_new_color(robot_name)\n    self.robot_colors[robot_name] = color\n    return color\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_laser_scan_color","title":"get_laser_scan_color","text":"<pre><code>get_laser_scan_color(\n    robot_name: str, alpha: float = 0.8\n) -&gt; RGBColor\n</code></pre> <p>Get color for laser scan visualization with specified alpha</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_laser_scan_color(self, robot_name: str, alpha: float = 0.8) -&gt; RGBColor:\n    \"\"\"Get color for laser scan visualization with specified alpha\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_path_color","title":"get_path_color","text":"<pre><code>get_path_color(\n    robot_name: str,\n    path_type: str = \"global\",\n    alpha: float = 0.9,\n) -&gt; RGBColor\n</code></pre> <p>Get color for path visualization</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <code>path_type</code> <code>str</code> <p>Type of path (\"global\" or \"local\")</p> <code>'global'</code> <code>alpha</code> <code>float</code> <p>Alpha transparency value</p> <code>0.9</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_path_color(\n    self, robot_name: str, path_type: str = \"global\", alpha: float = 0.9\n) -&gt; RGBColor:\n    \"\"\"\n    Get color for path visualization\n\n    Args:\n        robot_name: Name of the robot\n        path_type: Type of path (\"global\" or \"local\")\n        alpha: Alpha transparency value\n    \"\"\"\n    base_color = self.get_robot_color(robot_name)\n\n    if path_type == \"local\":\n        # Make local path slightly lighter/more transparent\n        alpha = min(alpha * 0.7, 1.0)\n        # Lighten the color for local paths\n        r = min(base_color.r + 50, 255)\n        g = min(base_color.g + 50, 255)\n        b = min(base_color.b + 50, 255)\n        return RGBColor(r, g, b, alpha)\n    else:\n        # Global path uses base color\n        return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_transform_color","title":"get_transform_color","text":"<pre><code>get_transform_color(\n    robot_name: str, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Get color for robot transform/coordinate frame visualization</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_transform_color(self, robot_name: str, alpha: float = 1.0) -&gt; RGBColor:\n    \"\"\"Get color for robot transform/coordinate frame visualization\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.reset_robot_color","title":"reset_robot_color","text":"<pre><code>reset_robot_color(robot_name: str) -&gt; None\n</code></pre> <p>Reset color assignment for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def reset_robot_color(self, robot_name: str) -&gt; None:\n    \"\"\"Reset color assignment for a specific robot\"\"\"\n    if robot_name in self.robot_colors:\n        del self.robot_colors[robot_name]\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.clear_all_colors","title":"clear_all_colors","text":"<pre><code>clear_all_colors() -&gt; None\n</code></pre> <p>Clear all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def clear_all_colors(self) -&gt; None:\n    \"\"\"Clear all color assignments\"\"\"\n    self.robot_colors.clear()\n    self.used_colors.clear()\n    self.color_index = 0\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_all_robot_colors","title":"get_all_robot_colors","text":"<pre><code>get_all_robot_colors() -&gt; Dict[str, RGBColor]\n</code></pre> <p>Get all assigned robot colors</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_all_robot_colors(self) -&gt; Dict[str, RGBColor]:\n    \"\"\"Get all assigned robot colors\"\"\"\n    return self.robot_colors.copy()\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.set_robot_color","title":"set_robot_color","text":"<pre><code>set_robot_color(robot_name: str, color: RGBColor) -&gt; None\n</code></pre> <p>Manually set color for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def set_robot_color(self, robot_name: str, color: RGBColor) -&gt; None:\n    \"\"\"Manually set color for a specific robot\"\"\"\n    self.robot_colors[robot_name] = color\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorManager.get_color_summary","title":"get_color_summary","text":"<pre><code>get_color_summary() -&gt; Dict[str, str]\n</code></pre> <p>Get summary of all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_color_summary(self) -&gt; Dict[str, str]:\n    \"\"\"Get summary of all color assignments\"\"\"\n    return {robot: color.to_hex() for robot, color in self.robot_colors.items()}\n</code></pre>"},{"location":"api/horus/color/#horus.color.ColorScheme","title":"ColorScheme","text":"<p>               Bases: <code>Enum</code></p> <p>Predefined color schemes for robot visualizations</p>"},{"location":"api/horus/color/#horus.color.RGBColor","title":"RGBColor  <code>dataclass</code>","text":"<pre><code>RGBColor(r: int, g: int, b: int, a: float = 1.0)\n</code></pre> <p>RGB color representation</p>"},{"location":"api/horus/color/#horus.color.RGBColor.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Convert to hex string (#RRGGBB)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Convert to hex string (#RRGGBB)\"\"\"\n    return f\"#{self.r:02x}{self.g:02x}{self.b:02x}\"\n</code></pre>"},{"location":"api/horus/color/#horus.color.RGBColor.to_rgba_tuple","title":"to_rgba_tuple","text":"<pre><code>to_rgba_tuple() -&gt; Tuple[int, int, int, float]\n</code></pre> <p>Convert to RGBA tuple</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_rgba_tuple(self) -&gt; Tuple[int, int, int, float]:\n    \"\"\"Convert to RGBA tuple\"\"\"\n    return (self.r, self.g, self.b, self.a)\n</code></pre>"},{"location":"api/horus/color/#horus.color.RGBColor.to_normalized_tuple","title":"to_normalized_tuple","text":"<pre><code>to_normalized_tuple() -&gt; Tuple[float, float, float, float]\n</code></pre> <p>Convert to normalized RGBA tuple (0.0-1.0)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_normalized_tuple(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Convert to normalized RGBA tuple (0.0-1.0)\"\"\"\n    return (self.r / 255.0, self.g / 255.0, self.b / 255.0, self.a)\n</code></pre>"},{"location":"api/horus/color/#horus.color.RGBColor.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(hex_color: str, alpha: float = 1.0) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from hex string</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hex(cls, hex_color: str, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from hex string\"\"\"\n    hex_color = hex_color.lstrip(\"#\")\n    if len(hex_color) != 6:\n        raise ValueError(\"Hex color must be 6 characters\")\n\n    r = int(hex_color[0:2], 16)\n    g = int(hex_color[2:4], 16)\n    b = int(hex_color[4:6], 16)\n\n    return cls(r, g, b, alpha)\n</code></pre>"},{"location":"api/horus/color/#horus.color.RGBColor.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    h: float, s: float, v: float, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from HSV values (h: 0-360, s,v: 0-1)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from HSV values (h: 0-360, s,v: 0-1)\"\"\"\n    import colorsys\n\n    r, g, b = colorsys.hsv_to_rgb(h / 360.0, s, v)\n    return cls(int(r * 255), int(g * 255), int(b * 255), alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/","title":"Color manager","text":""},{"location":"api/horus/color/color_manager/#horus.color.color_manager","title":"horus.color.color_manager","text":"<p>Color assignment system for robot visualizations in HORUS SDK</p>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorScheme","title":"ColorScheme","text":"<p>               Bases: <code>Enum</code></p> <p>Predefined color schemes for robot visualizations</p>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor","title":"RGBColor  <code>dataclass</code>","text":"<pre><code>RGBColor(r: int, g: int, b: int, a: float = 1.0)\n</code></pre> <p>RGB color representation</p>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor.to_hex","title":"to_hex","text":"<pre><code>to_hex() -&gt; str\n</code></pre> <p>Convert to hex string (#RRGGBB)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Convert to hex string (#RRGGBB)\"\"\"\n    return f\"#{self.r:02x}{self.g:02x}{self.b:02x}\"\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor.to_rgba_tuple","title":"to_rgba_tuple","text":"<pre><code>to_rgba_tuple() -&gt; Tuple[int, int, int, float]\n</code></pre> <p>Convert to RGBA tuple</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_rgba_tuple(self) -&gt; Tuple[int, int, int, float]:\n    \"\"\"Convert to RGBA tuple\"\"\"\n    return (self.r, self.g, self.b, self.a)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor.to_normalized_tuple","title":"to_normalized_tuple","text":"<pre><code>to_normalized_tuple() -&gt; Tuple[float, float, float, float]\n</code></pre> <p>Convert to normalized RGBA tuple (0.0-1.0)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def to_normalized_tuple(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Convert to normalized RGBA tuple (0.0-1.0)\"\"\"\n    return (self.r / 255.0, self.g / 255.0, self.b / 255.0, self.a)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(hex_color: str, alpha: float = 1.0) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from hex string</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hex(cls, hex_color: str, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from hex string\"\"\"\n    hex_color = hex_color.lstrip(\"#\")\n    if len(hex_color) != 6:\n        raise ValueError(\"Hex color must be 6 characters\")\n\n    r = int(hex_color[0:2], 16)\n    g = int(hex_color[2:4], 16)\n    b = int(hex_color[4:6], 16)\n\n    return cls(r, g, b, alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.RGBColor.from_hsv","title":"from_hsv  <code>classmethod</code>","text":"<pre><code>from_hsv(\n    h: float, s: float, v: float, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Create RGBColor from HSV values (h: 0-360, s,v: 0-1)</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, alpha: float = 1.0) -&gt; \"RGBColor\":\n    \"\"\"Create RGBColor from HSV values (h: 0-360, s,v: 0-1)\"\"\"\n    import colorsys\n\n    r, g, b = colorsys.hsv_to_rgb(h / 360.0, s, v)\n    return cls(int(r * 255), int(g * 255), int(b * 255), alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager","title":"ColorManager","text":"<pre><code>ColorManager(\n    color_scheme: ColorScheme = BRIGHT,\n    seed: Optional[int] = None,\n)\n</code></pre> <p>Manages unique color assignment for robots and their visualizations</p> <p>Parameters:</p> Name Type Description Default <code>color_scheme</code> <code>ColorScheme</code> <p>Color scheme to use for assignments</p> <code>BRIGHT</code> <code>seed</code> <code>Optional[int]</code> <p>Random seed for reproducible color generation</p> <code>None</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def __init__(\n    self, color_scheme: ColorScheme = ColorScheme.BRIGHT, seed: Optional[int] = None\n):\n    \"\"\"\n    Initialize color manager\n\n    Args:\n        color_scheme: Color scheme to use for assignments\n        seed: Random seed for reproducible color generation\n    \"\"\"\n    self.color_scheme = color_scheme\n    self.robot_colors: Dict[str, RGBColor] = {}\n    self.used_colors: List[str] = []\n    self.color_index = 0\n\n    # Set random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Select color palette based on scheme\n    self.palette = self._get_palette_for_scheme(color_scheme)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_robot_color","title":"get_robot_color","text":"<pre><code>get_robot_color(robot_name: str) -&gt; RGBColor\n</code></pre> <p>Get or assign a unique color for a robot</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <p>Returns:</p> Type Description <code>RGBColor</code> <p>RGBColor assigned to the robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_robot_color(self, robot_name: str) -&gt; RGBColor:\n    \"\"\"\n    Get or assign a unique color for a robot\n\n    Args:\n        robot_name: Name of the robot\n\n    Returns:\n        RGBColor assigned to the robot\n    \"\"\"\n    if robot_name in self.robot_colors:\n        return self.robot_colors[robot_name]\n\n    # Assign new color\n    color = self._assign_new_color(robot_name)\n    self.robot_colors[robot_name] = color\n    return color\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_laser_scan_color","title":"get_laser_scan_color","text":"<pre><code>get_laser_scan_color(\n    robot_name: str, alpha: float = 0.8\n) -&gt; RGBColor\n</code></pre> <p>Get color for laser scan visualization with specified alpha</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_laser_scan_color(self, robot_name: str, alpha: float = 0.8) -&gt; RGBColor:\n    \"\"\"Get color for laser scan visualization with specified alpha\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_path_color","title":"get_path_color","text":"<pre><code>get_path_color(\n    robot_name: str,\n    path_type: str = \"global\",\n    alpha: float = 0.9,\n) -&gt; RGBColor\n</code></pre> <p>Get color for path visualization</p> <p>Parameters:</p> Name Type Description Default <code>robot_name</code> <code>str</code> <p>Name of the robot</p> required <code>path_type</code> <code>str</code> <p>Type of path (\"global\" or \"local\")</p> <code>'global'</code> <code>alpha</code> <code>float</code> <p>Alpha transparency value</p> <code>0.9</code> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_path_color(\n    self, robot_name: str, path_type: str = \"global\", alpha: float = 0.9\n) -&gt; RGBColor:\n    \"\"\"\n    Get color for path visualization\n\n    Args:\n        robot_name: Name of the robot\n        path_type: Type of path (\"global\" or \"local\")\n        alpha: Alpha transparency value\n    \"\"\"\n    base_color = self.get_robot_color(robot_name)\n\n    if path_type == \"local\":\n        # Make local path slightly lighter/more transparent\n        alpha = min(alpha * 0.7, 1.0)\n        # Lighten the color for local paths\n        r = min(base_color.r + 50, 255)\n        g = min(base_color.g + 50, 255)\n        b = min(base_color.b + 50, 255)\n        return RGBColor(r, g, b, alpha)\n    else:\n        # Global path uses base color\n        return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_transform_color","title":"get_transform_color","text":"<pre><code>get_transform_color(\n    robot_name: str, alpha: float = 1.0\n) -&gt; RGBColor\n</code></pre> <p>Get color for robot transform/coordinate frame visualization</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_transform_color(self, robot_name: str, alpha: float = 1.0) -&gt; RGBColor:\n    \"\"\"Get color for robot transform/coordinate frame visualization\"\"\"\n    base_color = self.get_robot_color(robot_name)\n    return RGBColor(base_color.r, base_color.g, base_color.b, alpha)\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.reset_robot_color","title":"reset_robot_color","text":"<pre><code>reset_robot_color(robot_name: str) -&gt; None\n</code></pre> <p>Reset color assignment for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def reset_robot_color(self, robot_name: str) -&gt; None:\n    \"\"\"Reset color assignment for a specific robot\"\"\"\n    if robot_name in self.robot_colors:\n        del self.robot_colors[robot_name]\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.clear_all_colors","title":"clear_all_colors","text":"<pre><code>clear_all_colors() -&gt; None\n</code></pre> <p>Clear all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def clear_all_colors(self) -&gt; None:\n    \"\"\"Clear all color assignments\"\"\"\n    self.robot_colors.clear()\n    self.used_colors.clear()\n    self.color_index = 0\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_all_robot_colors","title":"get_all_robot_colors","text":"<pre><code>get_all_robot_colors() -&gt; Dict[str, RGBColor]\n</code></pre> <p>Get all assigned robot colors</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_all_robot_colors(self) -&gt; Dict[str, RGBColor]:\n    \"\"\"Get all assigned robot colors\"\"\"\n    return self.robot_colors.copy()\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.set_robot_color","title":"set_robot_color","text":"<pre><code>set_robot_color(robot_name: str, color: RGBColor) -&gt; None\n</code></pre> <p>Manually set color for a specific robot</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def set_robot_color(self, robot_name: str, color: RGBColor) -&gt; None:\n    \"\"\"Manually set color for a specific robot\"\"\"\n    self.robot_colors[robot_name] = color\n</code></pre>"},{"location":"api/horus/color/color_manager/#horus.color.color_manager.ColorManager.get_color_summary","title":"get_color_summary","text":"<pre><code>get_color_summary() -&gt; Dict[str, str]\n</code></pre> <p>Get summary of all color assignments</p> Source code in <code>horus/color/color_manager.py</code> <pre><code>def get_color_summary(self) -&gt; Dict[str, str]:\n    \"\"\"Get summary of all color assignments\"\"\"\n    return {robot: color.to_hex() for robot, color in self.robot_colors.items()}\n</code></pre>"},{"location":"api/horus/core/","title":"Index","text":""},{"location":"api/horus/core/#horus.core","title":"horus.core","text":"<p>HORUS SDK Core Module</p> <p>Pure logic components that are ROS-agnostic and unit-testable. Contains low-level infrastructure like EventBus, TopicMap, and exceptions.</p>"},{"location":"api/horus/core/event_bus/","title":"Event bus","text":""},{"location":"api/horus/core/event_bus/#horus.core.event_bus","title":"horus.core.event_bus","text":"<p>stub</p>"},{"location":"api/horus/core/exceptions/","title":"Exceptions","text":""},{"location":"api/horus/core/exceptions/#horus.core.exceptions","title":"horus.core.exceptions","text":"<p>stub</p>"},{"location":"api/horus/core/topic_map/","title":"Topic map","text":""},{"location":"api/horus/core/topic_map/#horus.core.topic_map","title":"horus.core.topic_map","text":"<p>stub</p>"},{"location":"api/horus/dataviz/","title":"Index","text":""},{"location":"api/horus/dataviz/#horus.dataviz","title":"horus.dataviz","text":"<p>HORUS SDK DataViz Module</p> <p>Data visualization and rendering management for mixed reality applications.</p>"},{"location":"api/horus/dataviz/#horus.dataviz.DataSource","title":"DataSource  <code>dataclass</code>","text":"<pre><code>DataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    robot_name: Optional[str] = None,\n    metadata: Dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for data sources</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique identifier for the data source</p> required <code>source_type</code> <code>DataSourceType</code> <p>Type of data source</p> required <code>topic</code> <code>str</code> <p>ROS topic or data channel</p> required <code>frame_id</code> <code>str</code> <p>Reference frame for the data</p> <code>'map'</code> <code>robot_name</code> <code>Optional[str]</code> <p>Associated robot (None for robot-independent data)</p> <code>None</code>"},{"location":"api/horus/dataviz/#horus.dataviz.DataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataSourceType","title":"DataSourceType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data sources for visualization</p>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz","title":"DataViz  <code>dataclass</code>","text":"<pre><code>DataViz(\n    name: str,\n    visualizations: List[VisualizationConfig] = list(),\n    color_manager: Optional[Any] = None,\n)\n</code></pre> <p>Data visualization manager for robot sensors and environmental data</p> <p>This class can manage visualizations for: - Robot-specific data (sensors, transforms, paths) - Robot-independent data (maps, global markers, TF tree) - Mixed scenarios with multiple robots and shared data</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name/identifier for this visualization collection</p> required <code>visualizations</code> <code>List[VisualizationConfig]</code> <p>List of visualization configurations</p> <code>list()</code> <code>color_manager</code> <code>Optional[Any]</code> <p>Color management system for unique robot colors</p> <code>None</code>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_sensor_visualization","title":"add_sensor_visualization","text":"<pre><code>add_sensor_visualization(\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add a sensor-based visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_sensor_visualization(\n    self,\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a sensor-based visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Create sensor data source\n    data_source = SensorDataSource(sensor, robot_name=robot_name)\n\n    # Determine visualization type\n    viz_type = self._get_viz_type_for_sensor(sensor)\n\n    # Auto-assign color based on sensor type and robot\n    if \"color\" not in render_options:\n        if viz_type == VisualizationType.LASER_SCAN:\n            color = self.color_manager.get_laser_scan_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n            render_options[\"alpha\"] = color.a\n        else:\n            # For other sensors, use base robot color\n            color = self.color_manager.get_robot_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n\n    # Create and add visualization\n    viz_config = VisualizationConfig(\n        viz_type=viz_type, data_source=data_source, render_options=render_options\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_robot_transform","title":"add_robot_transform","text":"<pre><code>add_robot_transform(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot transform visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_transform(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot transform visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color if not specified\n    if \"color\" not in render_options:\n        color = self.color_manager.get_transform_color(robot_name)\n        render_options[\"color\"] = color.to_hex()\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_transform\",\n        source_type=DataSourceType.ROBOT_TRANSFORM,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.COORDINATE_AXES,\n        data_source=data_source,\n        render_options=render_options,\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_robot_global_path","title":"add_robot_global_path","text":"<pre><code>add_robot_global_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot global path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_global_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot global path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for global path\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"global\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 3)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_global_path\",\n        source_type=DataSourceType.ROBOT_GLOBAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=3,  # Global paths on top of maps\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_robot_local_path","title":"add_robot_local_path","text":"<pre><code>add_robot_local_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot local path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_local_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot local path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for local path (lighter than global)\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"local\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 2)\n        render_options[\"line_style\"] = render_options.get(\"line_style\", \"dashed\")\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_local_path\",\n        source_type=DataSourceType.ROBOT_LOCAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=4,  # Local paths on top of global paths\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_robot_trajectory","title":"add_robot_trajectory","text":"<pre><code>add_robot_trajectory(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot trajectory visualization (executed path history)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_trajectory(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot trajectory visualization (executed path history)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for trajectory (even more transparent)\n    if \"color\" not in render_options:\n        base_color = self.color_manager.get_robot_color(robot_name)\n        render_options[\"color\"] = base_color.to_hex()\n        render_options[\"alpha\"] = 0.5  # More transparent for history\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 1)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_trajectory\",\n        source_type=DataSourceType.ROBOT_TRAJECTORY,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRAJECTORY,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=1,  # Trajectories in background\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_occupancy_grid","title":"add_occupancy_grid","text":"<pre><code>add_occupancy_grid(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add occupancy grid map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_occupancy_grid(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add occupancy grid map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"occupancy_grid\",\n        source_type=DataSourceType.OCCUPANCY_GRID,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.OCCUPANCY_GRID,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-10,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_3d_map","title":"add_3d_map","text":"<pre><code>add_3d_map(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add 3D map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_3d_map(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add 3D map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"map_3d\",\n        source_type=DataSourceType.MAP_3D,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.POINT_CLOUD,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-5,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_global_navigation_path","title":"add_global_navigation_path","text":"<pre><code>add_global_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (robot-independent)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_global_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (robot-independent)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Default styling for global navigation paths\n    if \"color\" not in render_options:\n        render_options[\"color\"] = \"#00FF00\"  # Green for global navigation\n    if \"line_width\" not in render_options:\n        render_options[\"line_width\"] = 4\n    if \"alpha\" not in render_options:\n        render_options[\"alpha\"] = 0.8\n\n    data_source = EnvironmentDataSource(\n        name=\"global_navigation_path\",\n        source_type=DataSourceType.GLOBAL_NAVIGATION_PATH,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=5,  # Foreground layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_navigation_path","title":"add_navigation_path","text":"<pre><code>add_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (alias for add_global_navigation_path)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (alias for\n    add_global_navigation_path)\"\"\"\n    return self.add_global_navigation_path(topic, frame_id, render_options)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.add_tf_tree","title":"add_tf_tree","text":"<pre><code>add_tf_tree(\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add TF tree visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_tf_tree(\n    self,\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add TF tree visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"tf_tree\",\n        source_type=DataSourceType.TF_TREE,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRANSFORM_TREE,\n        data_source=data_source,\n        render_options=render_options or {},\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.get_robot_visualizations","title":"get_robot_visualizations","text":"<pre><code>get_robot_visualizations(\n    robot_name: str,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_robot_visualizations(self, robot_name: str) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations for a specific robot\"\"\"\n    return [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name == robot_name\n    ]\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.get_global_visualizations","title":"get_global_visualizations","text":"<pre><code>get_global_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all robot-independent visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_global_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all robot-independent visualizations\"\"\"\n    return [viz for viz in self.visualizations if not viz.is_robot_specific()]\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.get_visualizations_by_type","title":"get_visualizations_by_type","text":"<pre><code>get_visualizations_by_type(\n    viz_type: VisualizationType,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations of a specific type</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_visualizations_by_type(\n    self, viz_type: VisualizationType\n) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations of a specific type\"\"\"\n    return [viz for viz in self.visualizations if viz.viz_type == viz_type]\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.get_enabled_visualizations","title":"get_enabled_visualizations","text":"<pre><code>get_enabled_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all enabled visualizations sorted by layer priority</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_enabled_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all enabled visualizations sorted by layer priority\"\"\"\n    enabled = [viz for viz in self.visualizations if viz.enabled]\n    return sorted(enabled, key=lambda v: v.layer_priority, reverse=True)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.enable_robot_visualizations","title":"enable_robot_visualizations","text":"<pre><code>enable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Enable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def enable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Enable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = True\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.disable_robot_visualizations","title":"disable_robot_visualizations","text":"<pre><code>disable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Disable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def disable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Disable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = False\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.remove_robot_visualizations","title":"remove_robot_visualizations","text":"<pre><code>remove_robot_visualizations(robot_name: str) -&gt; int\n</code></pre> <p>Remove all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def remove_robot_visualizations(self, robot_name: str) -&gt; int:\n    \"\"\"Remove all visualizations for a specific robot\"\"\"\n    initial_count = len(self.visualizations)\n    self.visualizations = [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name != robot_name\n    ]\n    return initial_count - len(self.visualizations)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.DataViz.get_summary","title":"get_summary","text":"<pre><code>get_summary() -&gt; Dict[str, Any]\n</code></pre> <p>Get a comprehensive summary of all visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_summary(self) -&gt; Dict[str, Any]:\n    \"\"\"Get a comprehensive summary of all visualizations\"\"\"\n    summary: Dict[str, Any] = {\n        \"name\": self.name,\n        \"total_visualizations\": len(self.visualizations),\n        \"enabled_visualizations\": len(self.get_enabled_visualizations()),\n        \"robot_specific\": len(\n            [v for v in self.visualizations if v.is_robot_specific()]\n        ),\n        \"global\": len(self.get_global_visualizations()),\n        \"by_robot\": {},\n        \"by_type\": {},\n        \"by_data_source\": {},\n    }\n\n    # Group by robot\n    for viz in self.visualizations:\n        if viz.is_robot_specific():\n            robot = viz.data_source.robot_name\n            if robot not in summary[\"by_robot\"]:\n                summary[\"by_robot\"][robot] = 0\n            summary[\"by_robot\"][robot] += 1\n\n    # Group by visualization type\n    for viz in self.visualizations:\n        viz_type = viz.viz_type.value\n        if viz_type not in summary[\"by_type\"]:\n            summary[\"by_type\"][viz_type] = 0\n        summary[\"by_type\"][viz_type] += 1\n\n    # Group by data source type\n    for viz in self.visualizations:\n        source_type = viz.data_source.source_type.value\n        if source_type not in summary[\"by_data_source\"]:\n            summary[\"by_data_source\"][source_type] = 0\n        summary[\"by_data_source\"][source_type] += 1\n\n    return summary\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.EnvironmentDataSource","title":"EnvironmentDataSource","text":"<pre><code>EnvironmentDataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from environment/world (robot-independent)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    **kwargs,\n):\n    super().__init__(name, source_type, topic, frame_id, None, **kwargs)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.EnvironmentDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.EnvironmentDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.EnvironmentDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.RobotDataSource","title":"RobotDataSource","text":"<pre><code>RobotDataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    robot_name: str,\n    frame_id: str = \"map\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from robot state/transforms</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    robot_name: str,\n    frame_id: str = \"map\",\n    **kwargs,\n):\n    super().__init__(name, source_type, topic, frame_id, robot_name, **kwargs)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.RobotDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.RobotDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.RobotDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.SensorDataSource","title":"SensorDataSource","text":"<pre><code>SensorDataSource(sensor: SensorInstance, **kwargs)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from a robot sensor</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(self, sensor: SensorInstance, **kwargs):\n    super().__init__(\n        name=sensor.name,\n        source_type=DataSourceType.SENSOR,\n        topic=sensor.topic,\n        frame_id=sensor.frame_id,\n        **kwargs,\n    )\n    self.sensor = sensor\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.SensorDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.SensorDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.SensorDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.VisualizationConfig","title":"VisualizationConfig  <code>dataclass</code>","text":"<pre><code>VisualizationConfig(\n    viz_type: VisualizationType,\n    data_source: DataSource,\n    display_name: str = \"\",\n    enabled: bool = True,\n    render_options: Dict[str, Any] = dict(),\n    layer_priority: int = 0,\n)\n</code></pre> <p>Configuration for a specific visualization</p> <p>Parameters:</p> Name Type Description Default <code>viz_type</code> <code>VisualizationType</code> <p>Type of visualization rendering</p> required <code>data_source</code> <code>DataSource</code> <p>Associated data source</p> required <code>display_name</code> <code>str</code> <p>Human-readable name for display</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>Whether visualization is active</p> <code>True</code> <code>render_options</code> <code>Dict[str, Any]</code> <p>Rendering-specific options</p> <code>dict()</code> <code>layer_priority</code> <code>int</code> <p>Display layer priority (higher = front)</p> <code>0</code>"},{"location":"api/horus/dataviz/#horus.dataviz.VisualizationConfig.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this visualization is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this visualization is tied to a specific robot\"\"\"\n    return self.data_source.is_robot_specific()\n</code></pre>"},{"location":"api/horus/dataviz/#horus.dataviz.VisualizationType","title":"VisualizationType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data visualization rendering</p>"},{"location":"api/horus/dataviz/dataviz/","title":"Dataviz","text":""},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz","title":"horus.dataviz.dataviz","text":"<p>Data visualization system for robot sensors and environmental data in HORUS SDK</p>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataSourceType","title":"DataSourceType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data sources for visualization</p>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.VisualizationType","title":"VisualizationType","text":"<p>               Bases: <code>Enum</code></p> <p>Types of data visualization rendering</p>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataSource","title":"DataSource  <code>dataclass</code>","text":"<pre><code>DataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    robot_name: Optional[str] = None,\n    metadata: Dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for data sources</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique identifier for the data source</p> required <code>source_type</code> <code>DataSourceType</code> <p>Type of data source</p> required <code>topic</code> <code>str</code> <p>ROS topic or data channel</p> required <code>frame_id</code> <code>str</code> <p>Reference frame for the data</p> <code>'map'</code> <code>robot_name</code> <code>Optional[str]</code> <p>Associated robot (None for robot-independent data)</p> <code>None</code>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.SensorDataSource","title":"SensorDataSource","text":"<pre><code>SensorDataSource(sensor: SensorInstance, **kwargs)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from a robot sensor</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(self, sensor: SensorInstance, **kwargs):\n    super().__init__(\n        name=sensor.name,\n        source_type=DataSourceType.SENSOR,\n        topic=sensor.topic,\n        frame_id=sensor.frame_id,\n        **kwargs,\n    )\n    self.sensor = sensor\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.SensorDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.SensorDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.SensorDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.RobotDataSource","title":"RobotDataSource","text":"<pre><code>RobotDataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    robot_name: str,\n    frame_id: str = \"map\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from robot state/transforms</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    robot_name: str,\n    frame_id: str = \"map\",\n    **kwargs,\n):\n    super().__init__(name, source_type, topic, frame_id, robot_name, **kwargs)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.RobotDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.RobotDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.RobotDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.EnvironmentDataSource","title":"EnvironmentDataSource","text":"<pre><code>EnvironmentDataSource(\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataSource</code></p> <p>Data source from environment/world (robot-independent)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    source_type: DataSourceType,\n    topic: str,\n    frame_id: str = \"map\",\n    **kwargs,\n):\n    super().__init__(name, source_type, topic, frame_id, None, **kwargs)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.EnvironmentDataSource.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this data source is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this data source is tied to a specific robot\"\"\"\n    return self.robot_name is not None\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.EnvironmentDataSource.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to data source</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to data source\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.EnvironmentDataSource.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.VisualizationConfig","title":"VisualizationConfig  <code>dataclass</code>","text":"<pre><code>VisualizationConfig(\n    viz_type: VisualizationType,\n    data_source: DataSource,\n    display_name: str = \"\",\n    enabled: bool = True,\n    render_options: Dict[str, Any] = dict(),\n    layer_priority: int = 0,\n)\n</code></pre> <p>Configuration for a specific visualization</p> <p>Parameters:</p> Name Type Description Default <code>viz_type</code> <code>VisualizationType</code> <p>Type of visualization rendering</p> required <code>data_source</code> <code>DataSource</code> <p>Associated data source</p> required <code>display_name</code> <code>str</code> <p>Human-readable name for display</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>Whether visualization is active</p> <code>True</code> <code>render_options</code> <code>Dict[str, Any]</code> <p>Rendering-specific options</p> <code>dict()</code> <code>layer_priority</code> <code>int</code> <p>Display layer priority (higher = front)</p> <code>0</code>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.VisualizationConfig.is_robot_specific","title":"is_robot_specific","text":"<pre><code>is_robot_specific() -&gt; bool\n</code></pre> <p>Check if this visualization is tied to a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def is_robot_specific(self) -&gt; bool:\n    \"\"\"Check if this visualization is tied to a specific robot\"\"\"\n    return self.data_source.is_robot_specific()\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz","title":"DataViz  <code>dataclass</code>","text":"<pre><code>DataViz(\n    name: str,\n    visualizations: List[VisualizationConfig] = list(),\n    color_manager: Optional[Any] = None,\n)\n</code></pre> <p>Data visualization manager for robot sensors and environmental data</p> <p>This class can manage visualizations for: - Robot-specific data (sensors, transforms, paths) - Robot-independent data (maps, global markers, TF tree) - Mixed scenarios with multiple robots and shared data</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name/identifier for this visualization collection</p> required <code>visualizations</code> <code>List[VisualizationConfig]</code> <p>List of visualization configurations</p> <code>list()</code> <code>color_manager</code> <code>Optional[Any]</code> <p>Color management system for unique robot colors</p> <code>None</code>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_sensor_visualization","title":"add_sensor_visualization","text":"<pre><code>add_sensor_visualization(\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add a sensor-based visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_sensor_visualization(\n    self,\n    sensor: SensorInstance,\n    robot_name: str,\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add a sensor-based visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Create sensor data source\n    data_source = SensorDataSource(sensor, robot_name=robot_name)\n\n    # Determine visualization type\n    viz_type = self._get_viz_type_for_sensor(sensor)\n\n    # Auto-assign color based on sensor type and robot\n    if \"color\" not in render_options:\n        if viz_type == VisualizationType.LASER_SCAN:\n            color = self.color_manager.get_laser_scan_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n            render_options[\"alpha\"] = color.a\n        else:\n            # For other sensors, use base robot color\n            color = self.color_manager.get_robot_color(robot_name)\n            render_options[\"color\"] = color.to_hex()\n\n    # Create and add visualization\n    viz_config = VisualizationConfig(\n        viz_type=viz_type, data_source=data_source, render_options=render_options\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_robot_transform","title":"add_robot_transform","text":"<pre><code>add_robot_transform(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot transform visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_transform(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot transform visualization with automatic color assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color if not specified\n    if \"color\" not in render_options:\n        color = self.color_manager.get_transform_color(robot_name)\n        render_options[\"color\"] = color.to_hex()\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_transform\",\n        source_type=DataSourceType.ROBOT_TRANSFORM,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.COORDINATE_AXES,\n        data_source=data_source,\n        render_options=render_options,\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_robot_global_path","title":"add_robot_global_path","text":"<pre><code>add_robot_global_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot global path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_global_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot global path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for global path\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"global\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 3)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_global_path\",\n        source_type=DataSourceType.ROBOT_GLOBAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=3,  # Global paths on top of maps\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_robot_local_path","title":"add_robot_local_path","text":"<pre><code>add_robot_local_path(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot local path planning visualization with automatic color assignment</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_local_path(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot local path planning visualization with automatic color\n    assignment\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for local path (lighter than global)\n    if \"color\" not in render_options:\n        color = self.color_manager.get_path_color(robot_name, \"local\")\n        render_options[\"color\"] = color.to_hex()\n        render_options[\"alpha\"] = color.a\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 2)\n        render_options[\"line_style\"] = render_options.get(\"line_style\", \"dashed\")\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_local_path\",\n        source_type=DataSourceType.ROBOT_LOCAL_PATH,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=4,  # Local paths on top of global paths\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_robot_trajectory","title":"add_robot_trajectory","text":"<pre><code>add_robot_trajectory(\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add robot trajectory visualization (executed path history)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_robot_trajectory(\n    self,\n    robot_name: str,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add robot trajectory visualization (executed path history)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Auto-assign color for trajectory (even more transparent)\n    if \"color\" not in render_options:\n        base_color = self.color_manager.get_robot_color(robot_name)\n        render_options[\"color\"] = base_color.to_hex()\n        render_options[\"alpha\"] = 0.5  # More transparent for history\n        render_options[\"line_width\"] = render_options.get(\"line_width\", 1)\n\n    data_source = RobotDataSource(\n        name=f\"{robot_name}_trajectory\",\n        source_type=DataSourceType.ROBOT_TRAJECTORY,\n        topic=topic,\n        robot_name=robot_name,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRAJECTORY,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=1,  # Trajectories in background\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_occupancy_grid","title":"add_occupancy_grid","text":"<pre><code>add_occupancy_grid(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add occupancy grid map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_occupancy_grid(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add occupancy grid map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"occupancy_grid\",\n        source_type=DataSourceType.OCCUPANCY_GRID,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.OCCUPANCY_GRID,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-10,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_3d_map","title":"add_3d_map","text":"<pre><code>add_3d_map(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add 3D map visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_3d_map(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add 3D map visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"map_3d\",\n        source_type=DataSourceType.MAP_3D,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.POINT_CLOUD,\n        data_source=data_source,\n        render_options=render_options or {},\n        layer_priority=-5,  # Background layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_global_navigation_path","title":"add_global_navigation_path","text":"<pre><code>add_global_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (robot-independent)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_global_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (robot-independent)\"\"\"\n    if render_options is None:\n        render_options = {}\n\n    # Default styling for global navigation paths\n    if \"color\" not in render_options:\n        render_options[\"color\"] = \"#00FF00\"  # Green for global navigation\n    if \"line_width\" not in render_options:\n        render_options[\"line_width\"] = 4\n    if \"alpha\" not in render_options:\n        render_options[\"alpha\"] = 0.8\n\n    data_source = EnvironmentDataSource(\n        name=\"global_navigation_path\",\n        source_type=DataSourceType.GLOBAL_NAVIGATION_PATH,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.PATH,\n        data_source=data_source,\n        render_options=render_options,\n        layer_priority=5,  # Foreground layer\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_navigation_path","title":"add_navigation_path","text":"<pre><code>add_navigation_path(\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add global navigation path visualization (alias for add_global_navigation_path)</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_navigation_path(\n    self,\n    topic: str,\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add global navigation path visualization (alias for\n    add_global_navigation_path)\"\"\"\n    return self.add_global_navigation_path(topic, frame_id, render_options)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.add_tf_tree","title":"add_tf_tree","text":"<pre><code>add_tf_tree(\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None\n</code></pre> <p>Add TF tree visualization</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def add_tf_tree(\n    self,\n    topic: str = \"/tf\",\n    frame_id: str = \"map\",\n    render_options: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Add TF tree visualization\"\"\"\n    data_source = EnvironmentDataSource(\n        name=\"tf_tree\",\n        source_type=DataSourceType.TF_TREE,\n        topic=topic,\n        frame_id=frame_id,\n    )\n\n    viz_config = VisualizationConfig(\n        viz_type=VisualizationType.TRANSFORM_TREE,\n        data_source=data_source,\n        render_options=render_options or {},\n    )\n\n    self._add_or_update_visualization(viz_config)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.get_robot_visualizations","title":"get_robot_visualizations","text":"<pre><code>get_robot_visualizations(\n    robot_name: str,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_robot_visualizations(self, robot_name: str) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations for a specific robot\"\"\"\n    return [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name == robot_name\n    ]\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.get_global_visualizations","title":"get_global_visualizations","text":"<pre><code>get_global_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all robot-independent visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_global_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all robot-independent visualizations\"\"\"\n    return [viz for viz in self.visualizations if not viz.is_robot_specific()]\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.get_visualizations_by_type","title":"get_visualizations_by_type","text":"<pre><code>get_visualizations_by_type(\n    viz_type: VisualizationType,\n) -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all visualizations of a specific type</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_visualizations_by_type(\n    self, viz_type: VisualizationType\n) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all visualizations of a specific type\"\"\"\n    return [viz for viz in self.visualizations if viz.viz_type == viz_type]\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.get_enabled_visualizations","title":"get_enabled_visualizations","text":"<pre><code>get_enabled_visualizations() -&gt; List[VisualizationConfig]\n</code></pre> <p>Get all enabled visualizations sorted by layer priority</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_enabled_visualizations(self) -&gt; List[VisualizationConfig]:\n    \"\"\"Get all enabled visualizations sorted by layer priority\"\"\"\n    enabled = [viz for viz in self.visualizations if viz.enabled]\n    return sorted(enabled, key=lambda v: v.layer_priority, reverse=True)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.enable_robot_visualizations","title":"enable_robot_visualizations","text":"<pre><code>enable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Enable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def enable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Enable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = True\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.disable_robot_visualizations","title":"disable_robot_visualizations","text":"<pre><code>disable_robot_visualizations(robot_name: str) -&gt; None\n</code></pre> <p>Disable all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def disable_robot_visualizations(self, robot_name: str) -&gt; None:\n    \"\"\"Disable all visualizations for a specific robot\"\"\"\n    for viz in self.get_robot_visualizations(robot_name):\n        viz.enabled = False\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.remove_robot_visualizations","title":"remove_robot_visualizations","text":"<pre><code>remove_robot_visualizations(robot_name: str) -&gt; int\n</code></pre> <p>Remove all visualizations for a specific robot</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def remove_robot_visualizations(self, robot_name: str) -&gt; int:\n    \"\"\"Remove all visualizations for a specific robot\"\"\"\n    initial_count = len(self.visualizations)\n    self.visualizations = [\n        viz\n        for viz in self.visualizations\n        if viz.data_source.robot_name != robot_name\n    ]\n    return initial_count - len(self.visualizations)\n</code></pre>"},{"location":"api/horus/dataviz/dataviz/#horus.dataviz.dataviz.DataViz.get_summary","title":"get_summary","text":"<pre><code>get_summary() -&gt; Dict[str, Any]\n</code></pre> <p>Get a comprehensive summary of all visualizations</p> Source code in <code>horus/dataviz/dataviz.py</code> <pre><code>def get_summary(self) -&gt; Dict[str, Any]:\n    \"\"\"Get a comprehensive summary of all visualizations\"\"\"\n    summary: Dict[str, Any] = {\n        \"name\": self.name,\n        \"total_visualizations\": len(self.visualizations),\n        \"enabled_visualizations\": len(self.get_enabled_visualizations()),\n        \"robot_specific\": len(\n            [v for v in self.visualizations if v.is_robot_specific()]\n        ),\n        \"global\": len(self.get_global_visualizations()),\n        \"by_robot\": {},\n        \"by_type\": {},\n        \"by_data_source\": {},\n    }\n\n    # Group by robot\n    for viz in self.visualizations:\n        if viz.is_robot_specific():\n            robot = viz.data_source.robot_name\n            if robot not in summary[\"by_robot\"]:\n                summary[\"by_robot\"][robot] = 0\n            summary[\"by_robot\"][robot] += 1\n\n    # Group by visualization type\n    for viz in self.visualizations:\n        viz_type = viz.viz_type.value\n        if viz_type not in summary[\"by_type\"]:\n            summary[\"by_type\"][viz_type] = 0\n        summary[\"by_type\"][viz_type] += 1\n\n    # Group by data source type\n    for viz in self.visualizations:\n        source_type = viz.data_source.source_type.value\n        if source_type not in summary[\"by_data_source\"]:\n            summary[\"by_data_source\"][source_type] = 0\n        summary[\"by_data_source\"][source_type] += 1\n\n    return summary\n</code></pre>"},{"location":"api/horus/plugins/","title":"Index","text":""},{"location":"api/horus/plugins/#horus.plugins","title":"horus.plugins","text":""},{"location":"api/horus/plugins/rosbot/","title":"Rosbot","text":""},{"location":"api/horus/plugins/rosbot/#horus.plugins.rosbot","title":"horus.plugins.rosbot","text":"<p>stub</p>"},{"location":"api/horus/robot/","title":"Index","text":""},{"location":"api/horus/robot/#horus.robot","title":"horus.robot","text":"<p>HORUS SDK Robot Module</p> <p>Robot management and control functionality.</p>"},{"location":"api/horus/robot/#horus.robot.Robot","title":"Robot  <code>dataclass</code>","text":"<pre><code>Robot(\n    name: str,\n    robot_type: RobotType,\n    metadata: Optional[Dict[str, Any]] = None,\n    sensors: List[SensorInstance] = list(),\n)\n</code></pre> <p>Base robot object with type and identification</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Robot identifier/namespace (unique)</p> required <code>robot_type</code> <code>RobotType</code> <p>Classification of robot (wheeled, legged, aerial)</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional robot information</p> <code>None</code> <code>sensors</code> <code>List[SensorInstance]</code> <p>List of sensors attached to this robot</p> <code>list()</code>"},{"location":"api/horus/robot/#horus.robot.Robot.get_type_str","title":"get_type_str","text":"<pre><code>get_type_str() -&gt; str\n</code></pre> <p>Get robot type as string</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_type_str(self) -&gt; str:\n    \"\"\"Get robot type as string\"\"\"\n    return self.robot_type.value\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to the robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to the robot\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.add_sensor","title":"add_sensor","text":"<pre><code>add_sensor(sensor: SensorInstance) -&gt; None\n</code></pre> <p>Add a sensor to this robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_sensor(self, sensor: \"SensorInstance\") -&gt; None:\n    \"\"\"Add a sensor to this robot\"\"\"\n    # Check if sensor with same name already exists\n    for existing_sensor in self.sensors:\n        if existing_sensor.name == sensor.name:\n            raise ValueError(f\"Sensor with name '{sensor.name}' already exists\")\n\n    self.sensors.append(sensor)\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.remove_sensor","title":"remove_sensor","text":"<pre><code>remove_sensor(sensor_name: str) -&gt; bool\n</code></pre> <p>Remove a sensor by name. Returns True if sensor was found and removed.</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def remove_sensor(self, sensor_name: str) -&gt; bool:\n    \"\"\"Remove a sensor by name. Returns True if sensor was found and removed.\"\"\"\n    for i, sensor in enumerate(self.sensors):\n        if sensor.name == sensor_name:\n            del self.sensors[i]\n            return True\n    return False\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_sensor","title":"get_sensor","text":"<pre><code>get_sensor(sensor_name: str) -&gt; Optional[SensorInstance]\n</code></pre> <p>Get sensor by name</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor(self, sensor_name: str) -&gt; Optional[\"SensorInstance\"]:\n    \"\"\"Get sensor by name\"\"\"\n    for sensor in self.sensors:\n        if sensor.name == sensor_name:\n            return sensor\n    return None\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_sensors_by_type","title":"get_sensors_by_type","text":"<pre><code>get_sensors_by_type(\n    sensor_type: SensorType,\n) -&gt; List[SensorInstance]\n</code></pre> <p>Get all sensors of a specific type</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensors_by_type(self, sensor_type: \"SensorType\") -&gt; List[\"SensorInstance\"]:\n    \"\"\"Get all sensors of a specific type\"\"\"\n    return [sensor for sensor in self.sensors if sensor.sensor_type == sensor_type]\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_sensor_count","title":"get_sensor_count","text":"<pre><code>get_sensor_count() -&gt; int\n</code></pre> <p>Get total number of sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor_count(self) -&gt; int:\n    \"\"\"Get total number of sensors\"\"\"\n    return len(self.sensors)\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.has_sensors","title":"has_sensors","text":"<pre><code>has_sensors() -&gt; bool\n</code></pre> <p>Check if robot has any sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def has_sensors(self) -&gt; bool:\n    \"\"\"Check if robot has any sensors\"\"\"\n    return len(self.sensors) &gt; 0\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.create_dataviz","title":"create_dataviz","text":"<pre><code>create_dataviz(\n    dataviz_name: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a DataViz instance for this robot with all its sensors</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance (defaults to robot name +          \"_viz\")</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance configured with this robot's sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_dataviz(self, dataviz_name: Optional[str] = None) -&gt; \"DataViz\":\n    \"\"\"\n    Create a DataViz instance for this robot with all its sensors\n\n    Args:\n        dataviz_name: Name for the DataViz instance (defaults to robot name +\n                     \"_viz\")\n\n    Returns:\n        DataViz instance configured with this robot's sensors\n    \"\"\"\n    from ..dataviz import DataViz\n\n    if dataviz_name is None:\n        dataviz_name = f\"{self.name}_viz\"\n\n    # Create DataViz instance\n    dataviz = DataViz(name=dataviz_name)\n\n    # Add all robot sensors to DataViz\n    for sensor in self.sensors:\n        dataviz.add_sensor_visualization(sensor, self.name)\n\n    # Add robot transform visualization\n    dataviz.add_robot_transform(\n        robot_name=self.name,\n        topic=f\"/{self.name}/tf\",\n        frame_id=f\"{self.name}_base_link\",\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.add_path_planning_to_dataviz","title":"add_path_planning_to_dataviz","text":"<pre><code>add_path_planning_to_dataviz(\n    dataviz: DataViz,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Add path planning visualizations to a DataViz instance</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>DataViz</code> <p>DataViz instance to add visualizations to</p> required <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning (optional)</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning (optional)</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory (optional)</p> <code>None</code> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_path_planning_to_dataviz(\n    self,\n    dataviz: \"DataViz\",\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    Add path planning visualizations to a DataViz instance\n\n    Args:\n        dataviz: DataViz instance to add visualizations to\n        global_path_topic: Topic for global path planning (optional)\n        local_path_topic: Topic for local path planning (optional)\n        trajectory_topic: Topic for executed trajectory (optional)\n    \"\"\"\n    # Add global path if topic provided\n    if global_path_topic:\n        dataviz.add_robot_global_path(\n            robot_name=self.name, topic=global_path_topic, frame_id=\"map\"\n        )\n\n    # Add local path if topic provided\n    if local_path_topic:\n        dataviz.add_robot_local_path(\n            robot_name=self.name, topic=local_path_topic, frame_id=\"map\"\n        )\n\n    # Add trajectory if topic provided\n    if trajectory_topic:\n        dataviz.add_robot_trajectory(\n            robot_name=self.name, topic=trajectory_topic, frame_id=\"map\"\n        )\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.create_full_dataviz","title":"create_full_dataviz","text":"<pre><code>create_full_dataviz(\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a complete DataViz instance with sensors and path planning</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance</p> <code>None</code> <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance with sensors and path planning configured</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_full_dataviz(\n    self,\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; \"DataViz\":\n    \"\"\"\n    Create a complete DataViz instance with sensors and path planning\n\n    Args:\n        dataviz_name: Name for the DataViz instance\n        global_path_topic: Topic for global path planning\n        local_path_topic: Topic for local path planning\n        trajectory_topic: Topic for executed trajectory\n\n    Returns:\n        DataViz instance with sensors and path planning configured\n    \"\"\"\n    # Create base DataViz with sensors\n    dataviz = self.create_dataviz(dataviz_name)\n\n    # Add path planning visualizations\n    self.add_path_planning_to_dataviz(\n        dataviz, global_path_topic, local_path_topic, trajectory_topic\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.register_with_horus","title":"register_with_horus","text":"<pre><code>register_with_horus(\n    dataviz: Optional[DataViz] = None,\n) -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Register this robot with the HORUS backend system</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>Optional[DataViz]</code> <p>DataViz instance (creates one if not provided)</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, registration_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def register_with_horus(\n    self, dataviz: Optional[\"DataViz\"] = None\n) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Register this robot with the HORUS backend system\n\n    Args:\n        dataviz: DataViz instance (creates one if not provided)\n\n    Returns:\n        Tuple of (success, registration_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    # Create DataViz if not provided\n    if dataviz is None:\n        dataviz = self.create_dataviz()\n\n    # Create registry client and register\n    registry = RobotRegistryClient()\n    success, result = registry.register_robot(self, dataviz)\n\n    if success:\n        # Store registration data\n        self.add_metadata(\"horus_robot_id\", result.get(\"robot_id\"))\n        self.add_metadata(\"horus_color\", result.get(\"assigned_color\"))\n        self.add_metadata(\"horus_registered\", True)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.unregister_from_horus","title":"unregister_from_horus","text":"<pre><code>unregister_from_horus() -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Unregister this robot from the HORUS backend system</p> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, result_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def unregister_from_horus(self) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Unregister this robot from the HORUS backend system\n\n    Returns:\n        Tuple of (success, result_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    robot_id = self.get_metadata(\"horus_robot_id\")\n    if not robot_id:\n        return False, {\"error\": \"Robot not registered with HORUS\"}\n\n    # Create registry client and unregister\n    registry = RobotRegistryClient()\n    success, result = registry.unregister_robot(robot_id)\n\n    if success:\n        # Clear registration data\n        self.add_metadata(\"horus_robot_id\", None)\n        self.add_metadata(\"horus_color\", None)\n        self.add_metadata(\"horus_registered\", False)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.is_registered_with_horus","title":"is_registered_with_horus","text":"<pre><code>is_registered_with_horus() -&gt; bool\n</code></pre> <p>Check if robot is registered with HORUS system</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def is_registered_with_horus(self) -&gt; bool:\n    \"\"\"Check if robot is registered with HORUS system\"\"\"\n    return bool(self.get_metadata(\"horus_registered\", False))\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_horus_id","title":"get_horus_id","text":"<pre><code>get_horus_id() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned robot ID</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_id(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned robot ID\"\"\"\n    result = self.get_metadata(\"horus_robot_id\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.Robot.get_horus_color","title":"get_horus_color","text":"<pre><code>get_horus_color() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned color</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_color(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned color\"\"\"\n    result = self.get_metadata(\"horus_color\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/robot/#horus.robot.RobotType","title":"RobotType","text":"<p>               Bases: <code>Enum</code></p> <p>Robot type classifications</p>"},{"location":"api/horus/robot/dataviz/","title":"Dataviz","text":""},{"location":"api/horus/robot/dataviz/#horus.robot.dataviz","title":"horus.robot.dataviz","text":"<p>stub</p>"},{"location":"api/horus/robot/robot/","title":"Robot","text":""},{"location":"api/horus/robot/robot/#horus.robot.robot","title":"horus.robot.robot","text":"<p>Robot object system for HORUS SDK</p>"},{"location":"api/horus/robot/robot/#horus.robot.robot.RobotType","title":"RobotType","text":"<p>               Bases: <code>Enum</code></p> <p>Robot type classifications</p>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot","title":"Robot  <code>dataclass</code>","text":"<pre><code>Robot(\n    name: str,\n    robot_type: RobotType,\n    metadata: Optional[Dict[str, Any]] = None,\n    sensors: List[SensorInstance] = list(),\n)\n</code></pre> <p>Base robot object with type and identification</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Robot identifier/namespace (unique)</p> required <code>robot_type</code> <code>RobotType</code> <p>Classification of robot (wheeled, legged, aerial)</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional robot information</p> <code>None</code> <code>sensors</code> <code>List[SensorInstance]</code> <p>List of sensors attached to this robot</p> <code>list()</code>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_type_str","title":"get_type_str","text":"<pre><code>get_type_str() -&gt; str\n</code></pre> <p>Get robot type as string</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_type_str(self) -&gt; str:\n    \"\"\"Get robot type as string\"\"\"\n    return self.robot_type.value\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to the robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to the robot\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.add_sensor","title":"add_sensor","text":"<pre><code>add_sensor(sensor: SensorInstance) -&gt; None\n</code></pre> <p>Add a sensor to this robot</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_sensor(self, sensor: \"SensorInstance\") -&gt; None:\n    \"\"\"Add a sensor to this robot\"\"\"\n    # Check if sensor with same name already exists\n    for existing_sensor in self.sensors:\n        if existing_sensor.name == sensor.name:\n            raise ValueError(f\"Sensor with name '{sensor.name}' already exists\")\n\n    self.sensors.append(sensor)\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.remove_sensor","title":"remove_sensor","text":"<pre><code>remove_sensor(sensor_name: str) -&gt; bool\n</code></pre> <p>Remove a sensor by name. Returns True if sensor was found and removed.</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def remove_sensor(self, sensor_name: str) -&gt; bool:\n    \"\"\"Remove a sensor by name. Returns True if sensor was found and removed.\"\"\"\n    for i, sensor in enumerate(self.sensors):\n        if sensor.name == sensor_name:\n            del self.sensors[i]\n            return True\n    return False\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_sensor","title":"get_sensor","text":"<pre><code>get_sensor(sensor_name: str) -&gt; Optional[SensorInstance]\n</code></pre> <p>Get sensor by name</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor(self, sensor_name: str) -&gt; Optional[\"SensorInstance\"]:\n    \"\"\"Get sensor by name\"\"\"\n    for sensor in self.sensors:\n        if sensor.name == sensor_name:\n            return sensor\n    return None\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_sensors_by_type","title":"get_sensors_by_type","text":"<pre><code>get_sensors_by_type(\n    sensor_type: SensorType,\n) -&gt; List[SensorInstance]\n</code></pre> <p>Get all sensors of a specific type</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensors_by_type(self, sensor_type: \"SensorType\") -&gt; List[\"SensorInstance\"]:\n    \"\"\"Get all sensors of a specific type\"\"\"\n    return [sensor for sensor in self.sensors if sensor.sensor_type == sensor_type]\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_sensor_count","title":"get_sensor_count","text":"<pre><code>get_sensor_count() -&gt; int\n</code></pre> <p>Get total number of sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_sensor_count(self) -&gt; int:\n    \"\"\"Get total number of sensors\"\"\"\n    return len(self.sensors)\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.has_sensors","title":"has_sensors","text":"<pre><code>has_sensors() -&gt; bool\n</code></pre> <p>Check if robot has any sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def has_sensors(self) -&gt; bool:\n    \"\"\"Check if robot has any sensors\"\"\"\n    return len(self.sensors) &gt; 0\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.create_dataviz","title":"create_dataviz","text":"<pre><code>create_dataviz(\n    dataviz_name: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a DataViz instance for this robot with all its sensors</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance (defaults to robot name +          \"_viz\")</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance configured with this robot's sensors</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_dataviz(self, dataviz_name: Optional[str] = None) -&gt; \"DataViz\":\n    \"\"\"\n    Create a DataViz instance for this robot with all its sensors\n\n    Args:\n        dataviz_name: Name for the DataViz instance (defaults to robot name +\n                     \"_viz\")\n\n    Returns:\n        DataViz instance configured with this robot's sensors\n    \"\"\"\n    from ..dataviz import DataViz\n\n    if dataviz_name is None:\n        dataviz_name = f\"{self.name}_viz\"\n\n    # Create DataViz instance\n    dataviz = DataViz(name=dataviz_name)\n\n    # Add all robot sensors to DataViz\n    for sensor in self.sensors:\n        dataviz.add_sensor_visualization(sensor, self.name)\n\n    # Add robot transform visualization\n    dataviz.add_robot_transform(\n        robot_name=self.name,\n        topic=f\"/{self.name}/tf\",\n        frame_id=f\"{self.name}_base_link\",\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.add_path_planning_to_dataviz","title":"add_path_planning_to_dataviz","text":"<pre><code>add_path_planning_to_dataviz(\n    dataviz: DataViz,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Add path planning visualizations to a DataViz instance</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>DataViz</code> <p>DataViz instance to add visualizations to</p> required <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning (optional)</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning (optional)</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory (optional)</p> <code>None</code> Source code in <code>horus/robot/robot.py</code> <pre><code>def add_path_planning_to_dataviz(\n    self,\n    dataviz: \"DataViz\",\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    Add path planning visualizations to a DataViz instance\n\n    Args:\n        dataviz: DataViz instance to add visualizations to\n        global_path_topic: Topic for global path planning (optional)\n        local_path_topic: Topic for local path planning (optional)\n        trajectory_topic: Topic for executed trajectory (optional)\n    \"\"\"\n    # Add global path if topic provided\n    if global_path_topic:\n        dataviz.add_robot_global_path(\n            robot_name=self.name, topic=global_path_topic, frame_id=\"map\"\n        )\n\n    # Add local path if topic provided\n    if local_path_topic:\n        dataviz.add_robot_local_path(\n            robot_name=self.name, topic=local_path_topic, frame_id=\"map\"\n        )\n\n    # Add trajectory if topic provided\n    if trajectory_topic:\n        dataviz.add_robot_trajectory(\n            robot_name=self.name, topic=trajectory_topic, frame_id=\"map\"\n        )\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.create_full_dataviz","title":"create_full_dataviz","text":"<pre><code>create_full_dataviz(\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; DataViz\n</code></pre> <p>Create a complete DataViz instance with sensors and path planning</p> <p>Parameters:</p> Name Type Description Default <code>dataviz_name</code> <code>Optional[str]</code> <p>Name for the DataViz instance</p> <code>None</code> <code>global_path_topic</code> <code>Optional[str]</code> <p>Topic for global path planning</p> <code>None</code> <code>local_path_topic</code> <code>Optional[str]</code> <p>Topic for local path planning</p> <code>None</code> <code>trajectory_topic</code> <code>Optional[str]</code> <p>Topic for executed trajectory</p> <code>None</code> <p>Returns:</p> Type Description <code>DataViz</code> <p>DataViz instance with sensors and path planning configured</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def create_full_dataviz(\n    self,\n    dataviz_name: Optional[str] = None,\n    global_path_topic: Optional[str] = None,\n    local_path_topic: Optional[str] = None,\n    trajectory_topic: Optional[str] = None,\n) -&gt; \"DataViz\":\n    \"\"\"\n    Create a complete DataViz instance with sensors and path planning\n\n    Args:\n        dataviz_name: Name for the DataViz instance\n        global_path_topic: Topic for global path planning\n        local_path_topic: Topic for local path planning\n        trajectory_topic: Topic for executed trajectory\n\n    Returns:\n        DataViz instance with sensors and path planning configured\n    \"\"\"\n    # Create base DataViz with sensors\n    dataviz = self.create_dataviz(dataviz_name)\n\n    # Add path planning visualizations\n    self.add_path_planning_to_dataviz(\n        dataviz, global_path_topic, local_path_topic, trajectory_topic\n    )\n\n    return dataviz\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.register_with_horus","title":"register_with_horus","text":"<pre><code>register_with_horus(\n    dataviz: Optional[DataViz] = None,\n) -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Register this robot with the HORUS backend system</p> <p>Parameters:</p> Name Type Description Default <code>dataviz</code> <code>Optional[DataViz]</code> <p>DataViz instance (creates one if not provided)</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, registration_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def register_with_horus(\n    self, dataviz: Optional[\"DataViz\"] = None\n) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Register this robot with the HORUS backend system\n\n    Args:\n        dataviz: DataViz instance (creates one if not provided)\n\n    Returns:\n        Tuple of (success, registration_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    # Create DataViz if not provided\n    if dataviz is None:\n        dataviz = self.create_dataviz()\n\n    # Create registry client and register\n    registry = RobotRegistryClient()\n    success, result = registry.register_robot(self, dataviz)\n\n    if success:\n        # Store registration data\n        self.add_metadata(\"horus_robot_id\", result.get(\"robot_id\"))\n        self.add_metadata(\"horus_color\", result.get(\"assigned_color\"))\n        self.add_metadata(\"horus_registered\", True)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.unregister_from_horus","title":"unregister_from_horus","text":"<pre><code>unregister_from_horus() -&gt; Tuple[bool, Dict[str, Any]]\n</code></pre> <p>Unregister this robot from the HORUS backend system</p> <p>Returns:</p> Type Description <code>Tuple[bool, Dict[str, Any]]</code> <p>Tuple of (success, result_data)</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def unregister_from_horus(self) -&gt; Tuple[bool, Dict[str, Any]]:\n    \"\"\"\n    Unregister this robot from the HORUS backend system\n\n    Returns:\n        Tuple of (success, result_data)\n    \"\"\"\n    from ..bridge.robot_registry import RobotRegistryClient\n\n    robot_id = self.get_metadata(\"horus_robot_id\")\n    if not robot_id:\n        return False, {\"error\": \"Robot not registered with HORUS\"}\n\n    # Create registry client and unregister\n    registry = RobotRegistryClient()\n    success, result = registry.unregister_robot(robot_id)\n\n    if success:\n        # Clear registration data\n        self.add_metadata(\"horus_robot_id\", None)\n        self.add_metadata(\"horus_color\", None)\n        self.add_metadata(\"horus_registered\", False)\n\n    return success, result\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.is_registered_with_horus","title":"is_registered_with_horus","text":"<pre><code>is_registered_with_horus() -&gt; bool\n</code></pre> <p>Check if robot is registered with HORUS system</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def is_registered_with_horus(self) -&gt; bool:\n    \"\"\"Check if robot is registered with HORUS system\"\"\"\n    return bool(self.get_metadata(\"horus_registered\", False))\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_horus_id","title":"get_horus_id","text":"<pre><code>get_horus_id() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned robot ID</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_id(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned robot ID\"\"\"\n    result = self.get_metadata(\"horus_robot_id\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/robot/robot/#horus.robot.robot.Robot.get_horus_color","title":"get_horus_color","text":"<pre><code>get_horus_color() -&gt; Optional[str]\n</code></pre> <p>Get HORUS-assigned color</p> Source code in <code>horus/robot/robot.py</code> <pre><code>def get_horus_color(self) -&gt; Optional[str]:\n    \"\"\"Get HORUS-assigned color\"\"\"\n    result = self.get_metadata(\"horus_color\")\n    return result if isinstance(result, str) else None\n</code></pre>"},{"location":"api/horus/robot/status/","title":"Status","text":""},{"location":"api/horus/robot/status/#horus.robot.status","title":"horus.robot.status","text":"<p>stub</p>"},{"location":"api/horus/robot/task/","title":"Task","text":""},{"location":"api/horus/robot/task/#horus.robot.task","title":"horus.robot.task","text":"<p>stub</p>"},{"location":"api/horus/robot/teleop/","title":"Teleop","text":""},{"location":"api/horus/robot/teleop/#horus.robot.teleop","title":"horus.robot.teleop","text":"<p>stub</p>"},{"location":"api/horus/sensors/","title":"Index","text":""},{"location":"api/horus/sensors/#horus.sensors","title":"horus.sensors","text":"<p>HORUS SDK Sensors Module</p> <p>Sensor modeling and management for robotic systems.</p>"},{"location":"api/horus/sensors/#horus.sensors.BaseSensor","title":"BaseSensor  <code>dataclass</code>","text":"<pre><code>BaseSensor(\n    name: str,\n    sensor_type: SensorType,\n    frame_id: str,\n    topic: str,\n    enabled: bool = True,\n    metadata: Dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base sensor class for all sensor types</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Sensor identifier</p> required <code>sensor_type</code> <code>SensorType</code> <p>Type of sensor</p> required <code>frame_id</code> <code>str</code> <p>ROS frame ID for the sensor</p> required <code>topic</code> <code>str</code> <p>ROS topic name for sensor data</p> required <code>enabled</code> <code>bool</code> <p>Whether sensor is active</p> <code>True</code> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional sensor information</p> <code>dict()</code>"},{"location":"api/horus/sensors/#horus.sensors.BaseSensor.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.BaseSensor.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.BaseSensor.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.BaseSensor.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera","title":"Camera  <code>dataclass</code>","text":"<pre><code>Camera(\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>Camera sensor with vision-specific properties</p> <p>Parameters:</p> Name Type Description Default <code>is_stereo</code> <code>bool</code> <p>Whether camera is stereo (dual camera)</p> <code>False</code> <code>resolution</code> <code>tuple[int, int]</code> <p>Camera resolution as (width, height)</p> <code>(640, 480)</code> <code>fps</code> <code>int</code> <p>Frames per second</p> <code>30</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>encoding</code> <code>str</code> <p>Image encoding format</p> <code>'bgr8'</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs,\n):\n    super().__init__(name, SensorType.CAMERA, frame_id, topic, **kwargs)\n    self.is_stereo = is_stereo\n    self.resolution = resolution\n    self.fps = fps\n    self.fov = fov\n    self.encoding = encoding\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.get_camera_type","title":"get_camera_type","text":"<pre><code>get_camera_type() -&gt; str\n</code></pre> <p>Get camera type as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_camera_type(self) -&gt; str:\n    \"\"\"Get camera type as string\"\"\"\n    return \"stereo\" if self.is_stereo else \"mono\"\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Camera.get_resolution_str","title":"get_resolution_str","text":"<pre><code>get_resolution_str() -&gt; str\n</code></pre> <p>Get resolution as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_resolution_str(self) -&gt; str:\n    \"\"\"Get resolution as string\"\"\"\n    return f\"{self.resolution[0]}x{self.resolution[1]}\"\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan","title":"LaserScan  <code>dataclass</code>","text":"<pre><code>LaserScan(\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>2D Laser scanner sensor</p> <p>Parameters:</p> Name Type Description Default <code>min_angle</code> <code>float</code> <p>Minimum scan angle in radians</p> <code>-3.14159</code> <code>max_angle</code> <code>float</code> <p>Maximum scan angle in radians</p> <code>3.14159</code> <code>angle_increment</code> <code>float</code> <p>Angular resolution in radians</p> <code>0.005</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.1</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>30.0</code> <code>range_resolution</code> <code>float</code> <p>Range resolution in meters</p> <code>0.01</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LASER_SCAN, frame_id, topic, **kwargs)\n    self.min_angle = min_angle\n    self.max_angle = max_angle\n    self.angle_increment = angle_increment\n    self.min_range = min_range\n    self.max_range = max_range\n    self.range_resolution = range_resolution\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.get_scan_range_degrees","title":"get_scan_range_degrees","text":"<pre><code>get_scan_range_degrees() -&gt; float\n</code></pre> <p>Get scan range in degrees</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_scan_range_degrees(self) -&gt; float:\n    \"\"\"Get scan range in degrees\"\"\"\n    return (self.max_angle - self.min_angle) * 180.0 / 3.14159\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.LaserScan.get_num_points","title":"get_num_points","text":"<pre><code>get_num_points() -&gt; int\n</code></pre> <p>Get approximate number of scan points</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_num_points(self) -&gt; int:\n    \"\"\"Get approximate number of scan points\"\"\"\n    return int((self.max_angle - self.min_angle) / self.angle_increment)\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D","title":"Lidar3D  <code>dataclass</code>","text":"<pre><code>Lidar3D(\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>3D LiDAR sensor</p> <p>Parameters:</p> Name Type Description Default <code>vertical_fov</code> <code>float</code> <p>Vertical field of view in degrees</p> <code>40.0</code> <code>horizontal_fov</code> <code>float</code> <p>Horizontal field of view in degrees</p> <code>360.0</code> <code>vertical_resolution</code> <code>float</code> <p>Vertical angular resolution in degrees</p> <code>0.4</code> <code>horizontal_resolution</code> <code>float</code> <p>Horizontal angular resolution in degrees</p> <code>0.4</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.5</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>100.0</code> <code>points_per_second</code> <code>int</code> <p>Points per second capability</p> <code>1000000</code> <code>num_layers</code> <code>int</code> <p>Number of vertical layers/channels</p> <code>64</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LIDAR_3D, frame_id, topic, **kwargs)\n    self.vertical_fov = vertical_fov\n    self.horizontal_fov = horizontal_fov\n    self.vertical_resolution = vertical_resolution\n    self.horizontal_resolution = horizontal_resolution\n    self.min_range = min_range\n    self.max_range = max_range\n    self.points_per_second = points_per_second\n    self.num_layers = num_layers\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.get_point_cloud_size","title":"get_point_cloud_size","text":"<pre><code>get_point_cloud_size() -&gt; int\n</code></pre> <p>Get approximate point cloud size</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_point_cloud_size(self) -&gt; int:\n    \"\"\"Get approximate point cloud size\"\"\"\n    h_points = int(self.horizontal_fov / self.horizontal_resolution)\n    v_points = int(self.vertical_fov / self.vertical_resolution)\n    return h_points * v_points\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.Lidar3D.get_lidar_type","title":"get_lidar_type","text":"<pre><code>get_lidar_type() -&gt; str\n</code></pre> <p>Get LiDAR type description</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_lidar_type(self) -&gt; str:\n    \"\"\"Get LiDAR type description\"\"\"\n    return f\"{self.num_layers}-layer 3D LiDAR\"\n</code></pre>"},{"location":"api/horus/sensors/#horus.sensors.SensorType","title":"SensorType","text":"<p>               Bases: <code>Enum</code></p> <p>Sensor type classifications</p>"},{"location":"api/horus/sensors/sensors/","title":"Sensors","text":""},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors","title":"horus.sensors.sensors","text":"<p>Sensor system for robot data visualization in HORUS SDK</p>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.SensorType","title":"SensorType","text":"<p>               Bases: <code>Enum</code></p> <p>Sensor type classifications</p>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.BaseSensor","title":"BaseSensor  <code>dataclass</code>","text":"<pre><code>BaseSensor(\n    name: str,\n    sensor_type: SensorType,\n    frame_id: str,\n    topic: str,\n    enabled: bool = True,\n    metadata: Dict[str, Any] = dict(),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base sensor class for all sensor types</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Sensor identifier</p> required <code>sensor_type</code> <code>SensorType</code> <p>Type of sensor</p> required <code>frame_id</code> <code>str</code> <p>ROS frame ID for the sensor</p> required <code>topic</code> <code>str</code> <p>ROS topic name for sensor data</p> required <code>enabled</code> <code>bool</code> <p>Whether sensor is active</p> <code>True</code> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional sensor information</p> <code>dict()</code>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.BaseSensor.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.BaseSensor.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.BaseSensor.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.BaseSensor.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera","title":"Camera  <code>dataclass</code>","text":"<pre><code>Camera(\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>Camera sensor with vision-specific properties</p> <p>Parameters:</p> Name Type Description Default <code>is_stereo</code> <code>bool</code> <p>Whether camera is stereo (dual camera)</p> <code>False</code> <code>resolution</code> <code>tuple[int, int]</code> <p>Camera resolution as (width, height)</p> <code>(640, 480)</code> <code>fps</code> <code>int</code> <p>Frames per second</p> <code>30</code> <code>fov</code> <code>float</code> <p>Field of view in degrees</p> <code>60.0</code> <code>encoding</code> <code>str</code> <p>Image encoding format</p> <code>'bgr8'</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    is_stereo: bool = False,\n    resolution: tuple[int, int] = (640, 480),\n    fps: int = 30,\n    fov: float = 60.0,\n    encoding: str = \"bgr8\",\n    **kwargs,\n):\n    super().__init__(name, SensorType.CAMERA, frame_id, topic, **kwargs)\n    self.is_stereo = is_stereo\n    self.resolution = resolution\n    self.fps = fps\n    self.fov = fov\n    self.encoding = encoding\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.get_camera_type","title":"get_camera_type","text":"<pre><code>get_camera_type() -&gt; str\n</code></pre> <p>Get camera type as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_camera_type(self) -&gt; str:\n    \"\"\"Get camera type as string\"\"\"\n    return \"stereo\" if self.is_stereo else \"mono\"\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.get_resolution_str","title":"get_resolution_str","text":"<pre><code>get_resolution_str() -&gt; str\n</code></pre> <p>Get resolution as string</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_resolution_str(self) -&gt; str:\n    \"\"\"Get resolution as string\"\"\"\n    return f\"{self.resolution[0]}x{self.resolution[1]}\"\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Camera.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan","title":"LaserScan  <code>dataclass</code>","text":"<pre><code>LaserScan(\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>2D Laser scanner sensor</p> <p>Parameters:</p> Name Type Description Default <code>min_angle</code> <code>float</code> <p>Minimum scan angle in radians</p> <code>-3.14159</code> <code>max_angle</code> <code>float</code> <p>Maximum scan angle in radians</p> <code>3.14159</code> <code>angle_increment</code> <code>float</code> <p>Angular resolution in radians</p> <code>0.005</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.1</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>30.0</code> <code>range_resolution</code> <code>float</code> <p>Range resolution in meters</p> <code>0.01</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    min_angle: float = -3.14159,\n    max_angle: float = 3.14159,\n    angle_increment: float = 0.005,\n    min_range: float = 0.1,\n    max_range: float = 30.0,\n    range_resolution: float = 0.01,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LASER_SCAN, frame_id, topic, **kwargs)\n    self.min_angle = min_angle\n    self.max_angle = max_angle\n    self.angle_increment = angle_increment\n    self.min_range = min_range\n    self.max_range = max_range\n    self.range_resolution = range_resolution\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.get_scan_range_degrees","title":"get_scan_range_degrees","text":"<pre><code>get_scan_range_degrees() -&gt; float\n</code></pre> <p>Get scan range in degrees</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_scan_range_degrees(self) -&gt; float:\n    \"\"\"Get scan range in degrees\"\"\"\n    return (self.max_angle - self.min_angle) * 180.0 / 3.14159\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.get_num_points","title":"get_num_points","text":"<pre><code>get_num_points() -&gt; int\n</code></pre> <p>Get approximate number of scan points</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_num_points(self) -&gt; int:\n    \"\"\"Get approximate number of scan points\"\"\"\n    return int((self.max_angle - self.min_angle) / self.angle_increment)\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.LaserScan.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D","title":"Lidar3D  <code>dataclass</code>","text":"<pre><code>Lidar3D(\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseSensor</code></p> <p>3D LiDAR sensor</p> <p>Parameters:</p> Name Type Description Default <code>vertical_fov</code> <code>float</code> <p>Vertical field of view in degrees</p> <code>40.0</code> <code>horizontal_fov</code> <code>float</code> <p>Horizontal field of view in degrees</p> <code>360.0</code> <code>vertical_resolution</code> <code>float</code> <p>Vertical angular resolution in degrees</p> <code>0.4</code> <code>horizontal_resolution</code> <code>float</code> <p>Horizontal angular resolution in degrees</p> <code>0.4</code> <code>min_range</code> <code>float</code> <p>Minimum range in meters</p> <code>0.5</code> <code>max_range</code> <code>float</code> <p>Maximum range in meters</p> <code>100.0</code> <code>points_per_second</code> <code>int</code> <p>Points per second capability</p> <code>1000000</code> <code>num_layers</code> <code>int</code> <p>Number of vertical layers/channels</p> <code>64</code> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    frame_id: str,\n    topic: str,\n    vertical_fov: float = 40.0,\n    horizontal_fov: float = 360.0,\n    vertical_resolution: float = 0.4,\n    horizontal_resolution: float = 0.4,\n    min_range: float = 0.5,\n    max_range: float = 100.0,\n    points_per_second: int = 1000000,\n    num_layers: int = 64,\n    **kwargs,\n):\n    super().__init__(name, SensorType.LIDAR_3D, frame_id, topic, **kwargs)\n    self.vertical_fov = vertical_fov\n    self.horizontal_fov = horizontal_fov\n    self.vertical_resolution = vertical_resolution\n    self.horizontal_resolution = horizontal_resolution\n    self.min_range = min_range\n    self.max_range = max_range\n    self.points_per_second = points_per_second\n    self.num_layers = num_layers\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.get_point_cloud_size","title":"get_point_cloud_size","text":"<pre><code>get_point_cloud_size() -&gt; int\n</code></pre> <p>Get approximate point cloud size</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_point_cloud_size(self) -&gt; int:\n    \"\"\"Get approximate point cloud size\"\"\"\n    h_points = int(self.horizontal_fov / self.horizontal_resolution)\n    v_points = int(self.vertical_fov / self.vertical_resolution)\n    return h_points * v_points\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.get_lidar_type","title":"get_lidar_type","text":"<pre><code>get_lidar_type() -&gt; str\n</code></pre> <p>Get LiDAR type description</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_lidar_type(self) -&gt; str:\n    \"\"\"Get LiDAR type description\"\"\"\n    return f\"{self.num_layers}-layer 3D LiDAR\"\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable sensor\"\"\"\n    self.enabled = True\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disable sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable sensor\"\"\"\n    self.enabled = False\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.add_metadata","title":"add_metadata","text":"<pre><code>add_metadata(key: str, value: Any) -&gt; None\n</code></pre> <p>Add metadata to sensor</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def add_metadata(self, key: str, value: Any) -&gt; None:\n    \"\"\"Add metadata to sensor\"\"\"\n    self.metadata[key] = value\n</code></pre>"},{"location":"api/horus/sensors/sensors/#horus.sensors.sensors.Lidar3D.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata(key: str, default: Any = None) -&gt; Any\n</code></pre> <p>Get metadata value by key</p> Source code in <code>horus/sensors/sensors.py</code> <pre><code>def get_metadata(self, key: str, default: Any = None) -&gt; Any:\n    \"\"\"Get metadata value by key\"\"\"\n    return self.metadata.get(key, default)\n</code></pre>"},{"location":"api/horus/utils/","title":"Index","text":""},{"location":"api/horus/utils/#horus.utils","title":"horus.utils","text":"<p>HORUS SDK utilities</p>"},{"location":"api/horus/utils/#horus.utils.BackendManager","title":"BackendManager","text":"<pre><code>BackendManager(backend_type)\n</code></pre> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def __init__(self, backend_type):\n    self.backend_type = backend_type\n    self.backend_process = None\n    self._shutdown_called = False  # Prevent duplicate shutdowns\n    self.backend_configs = {\n        \"ros2\": {\n            \"package\": \"horus_backend\",\n            \"launch_file\": \"horus_complete_backend.launch.py\",\n            \"check_command\": \"ros2 pkg list | grep horus_backend\",\n            \"launch_command\": (\n                \"ros2 launch horus_backend \" \"horus_complete_backend.launch.py\"\n            ),\n            \"tcp_port\": 8080,\n            \"unity_port\": 10000,\n        },\n        \"ros1\": {\n            \"package\": \"horus_backend_ros1\",\n            \"launch_file\": \"horus_backend.launch\",\n            \"check_command\": \"rospack find horus_backend_ros1\",\n            \"launch_command\": \"roslaunch horus_backend_ros1 horus_backend.launch\",\n            \"tcp_port\": 8081,\n        },\n    }\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.launch_backend","title":"launch_backend","text":"<pre><code>launch_backend()\n</code></pre> <p>Launch the appropriate backend</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def launch_backend(self):\n    \"\"\"Launch the appropriate backend\"\"\"\n    from .spinner import Spinner\n\n    if not self._is_backend_running():\n        spinner = Spinner(f\"Starting {self.backend_type.upper()} backend\")\n        spinner.start()\n\n        self._start_backend_process()\n        self._wait_for_backend_ready_silent()\n\n        spinner.stop()\n        config = self.backend_configs[self.backend_type]\n        print(\n            f\"  \\033[92m\u2713\\033[0m Backend startup: \"\n            f\"\\033[90mReady on port {config['tcp_port']}\\033[0m\"\n        )\n    else:\n        print(\"  \\033[92m\u2713\\033[0m Backend status: \\033[90mAlready running\\033[0m\")\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.test_connection","title":"test_connection","text":"<pre><code>test_connection()\n</code></pre> <p>Test connection to backend</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def test_connection(self):\n    \"\"\"Test connection to backend\"\"\"\n    return self._is_backend_running()\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.test_unity_endpoint","title":"test_unity_endpoint","text":"<pre><code>test_unity_endpoint()\n</code></pre> <p>Test Unity TCP endpoint connection</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def test_unity_endpoint(self):\n    \"\"\"Test Unity TCP endpoint connection\"\"\"\n    return self._is_unity_endpoint_running()\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.get_unity_port","title":"get_unity_port","text":"<pre><code>get_unity_port()\n</code></pre> <p>Get Unity TCP endpoint port</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def get_unity_port(self):\n    \"\"\"Get Unity TCP endpoint port\"\"\"\n    return self.backend_configs[self.backend_type].get(\"unity_port\", 10000)\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.get_port","title":"get_port","text":"<pre><code>get_port()\n</code></pre> <p>Get backend TCP port</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def get_port(self):\n    \"\"\"Get backend TCP port\"\"\"\n    return self.backend_configs[self.backend_type][\"tcp_port\"]\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.BackendManager.stop_backend","title":"stop_backend","text":"<pre><code>stop_backend()\n</code></pre> <p>Stop the backend process and all related ROS2 nodes</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def stop_backend(self):\n    \"\"\"Stop the backend process and all related ROS2 nodes\"\"\"\n    # Prevent duplicate shutdown calls\n    if self._shutdown_called:\n        return\n    self._shutdown_called = True\n\n    print(\"\\033[90mStopping HORUS backend processes...\\033[0m\")\n\n    # First, try to stop our launched process gracefully\n    if self.backend_process:\n        try:\n            # Send SIGTERM to the process group (this will stop both\n            # backend and unity endpoint)\n            os.killpg(os.getpgid(self.backend_process.pid), 15)\n            self.backend_process.wait(timeout=8)\n            print(\"\\033[90m  \u2713 Launch process stopped gracefully\\033[0m\")\n        except (ProcessLookupError, subprocess.TimeoutExpired):\n            # Force kill if graceful shutdown fails\n            try:\n                os.killpg(os.getpgid(self.backend_process.pid), 9)\n                print(\"\\033[90m  \u2713 Launch process force-killed\\033[0m\")\n            except ProcessLookupError:\n                pass\n        finally:\n            self.backend_process = None\n\n    # Additionally, ensure all HORUS-related processes are stopped\n    self._cleanup_horus_processes()\n\n    print(\"\\033[90m  \u2713 All HORUS backend processes stopped\\033[0m\")\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.RequirementsChecker","title":"RequirementsChecker","text":"<pre><code>RequirementsChecker()\n</code></pre> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def __init__(self):\n    self.backend_requirements = {\n        \"ros2\": [\n            (\"ROS2 Installation\", self._check_ros2_installation),\n            (\"HORUS Backend Package\", self._check_horus_backend_package),\n            (\"Network Port 8080\", self._check_port_availability),\n            (\"Unity TCP Endpoint (Port 10000)\", self._check_unity_endpoint),\n        ],\n        \"ros1\": [\n            (\"ROS1 Installation\", self._check_ros1_installation),\n            (\"HORUS Backend Package\", self._check_horus_backend_ros1_package),\n            (\"Network Port 8081\", self._check_port_availability),\n        ],\n    }\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.RequirementsChecker.get_backend_checks","title":"get_backend_checks","text":"<pre><code>get_backend_checks(backend_type)\n</code></pre> <p>Get the list of checks for a backend type</p> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def get_backend_checks(self, backend_type):\n    \"\"\"Get the list of checks for a backend type\"\"\"\n    if backend_type not in self.backend_requirements:\n        return [\n            (\n                \"Invalid Backend\",\n                lambda bt: (False, f\"Unknown backend: {backend_type}\"),\n            )\n        ]\n    return self.backend_requirements[backend_type]\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.RequirementsChecker.check_backend","title":"check_backend","text":"<pre><code>check_backend(backend_type)\n</code></pre> <p>Check all requirements for specified backend</p> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def check_backend(self, backend_type):\n    \"\"\"Check all requirements for specified backend\"\"\"\n    requirements = {}\n\n    if backend_type not in self.backend_requirements:\n        return {\n            \"Invalid Backend\": {\n                \"available\": False,\n                \"message\": f\"Unknown backend: {backend_type}\",\n            }\n        }\n\n    for req_name, check_func in self.backend_requirements[backend_type]:\n        try:\n            available, message = check_func(backend_type)\n            requirements[req_name] = {\"available\": available, \"message\": message}\n        except Exception as e:\n            requirements[req_name] = {\n                \"available\": False,\n                \"message\": f\"Check failed: {str(e)}\",\n            }\n\n    return requirements\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.Spinner","title":"Spinner","text":"<pre><code>Spinner(message='Loading', delay=0.1, style='default')\n</code></pre> Source code in <code>horus/utils/spinner.py</code> <pre><code>def __init__(self, message=\"Loading\", delay=0.1, style=\"default\"):\n    self.message = message\n    self.delay = delay\n    self.running = False\n    self.thread = None\n    self.style = style\n\n    # Different spinner styles\n    self.spinner_styles = {\n        \"default\": [\"\u280b\", \"\u2819\", \"\u2839\", \"\u2838\", \"\u283c\", \"\u2834\", \"\u2826\", \"\u2827\", \"\u2807\", \"\u280f\"],\n        \"dots\": [\"\u2808\", \"\u2810\", \"\u2820\", \"\u2880\", \"\u2840\", \"\u2804\", \"\u2802\", \"\u2801\"],\n        \"circle\": [\"\u25d0\", \"\u25d3\", \"\u25d1\", \"\u25d2\"],\n        \"arrows\": [\"\u2190\", \"\u2196\", \"\u2191\", \"\u2197\", \"\u2192\", \"\u2198\", \"\u2193\", \"\u2199\"],\n        \"pulse\": [\"\u25cf\", \"\u25cf\", \"\u25cf\", \"\u25cb\", \"\u25cb\", \"\u25cb\"],\n    }\n\n    self.spinner_chars = self.spinner_styles.get(\n        style, self.spinner_styles[\"default\"]\n    )\n    self.current_char = 0\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.Spinner.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the spinner</p> Source code in <code>horus/utils/spinner.py</code> <pre><code>def start(self):\n    \"\"\"Start the spinner\"\"\"\n    if not self.running:\n        self.running = True\n        self.thread = threading.Thread(target=self._spin)\n        self.thread.daemon = True\n        self.thread.start()\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.Spinner.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the spinner and clear the line</p> Source code in <code>horus/utils/spinner.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the spinner and clear the line\"\"\"\n    if self.running:\n        self.running = False\n        if self.thread:\n            self.thread.join()\n        # Clear the line\n        sys.stdout.write(f\"\\r{' ' * (len(self.message) + 10)}\\r\")\n        sys.stdout.flush()\n</code></pre>"},{"location":"api/horus/utils/#horus.utils.show_ascii_art","title":"show_ascii_art","text":"<pre><code>show_ascii_art()\n</code></pre> <p>Display HORUS ASCII art header</p> Source code in <code>horus/utils/branding.py</code> <pre><code>def show_ascii_art():\n    \"\"\"Display HORUS ASCII art header\"\"\"\n    art = \"\"\"\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[95m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588   \u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m     \u2591\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[95m\u2588\u2588\u2588   \u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[90m\u2591\u2591\u2591   \u2591\u2591\u2591  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \u2591\u2591\u2591   \u2591\u2591\u2591   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\033[0m\n\n\\033[94m           Holistic Operational Reality\\033[0m\n\\033[95m              for Unified Systems\\033[0m\n\"\"\"\n    print(art)\n    print(f\"\ud83e\udd16 HORUS Mixed Reality Robot Management SDK v{__version__}\")\n    print(\"\ud83c\udfd7\ufe0f  Developed at RICE Lab, University of Genoa\")\n    print(\"=\" * 60)\n</code></pre>"},{"location":"api/horus/utils/backend_manager/","title":"Backend manager","text":""},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager","title":"horus.utils.backend_manager","text":""},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager","title":"BackendManager","text":"<pre><code>BackendManager(backend_type)\n</code></pre> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def __init__(self, backend_type):\n    self.backend_type = backend_type\n    self.backend_process = None\n    self._shutdown_called = False  # Prevent duplicate shutdowns\n    self.backend_configs = {\n        \"ros2\": {\n            \"package\": \"horus_backend\",\n            \"launch_file\": \"horus_complete_backend.launch.py\",\n            \"check_command\": \"ros2 pkg list | grep horus_backend\",\n            \"launch_command\": (\n                \"ros2 launch horus_backend \" \"horus_complete_backend.launch.py\"\n            ),\n            \"tcp_port\": 8080,\n            \"unity_port\": 10000,\n        },\n        \"ros1\": {\n            \"package\": \"horus_backend_ros1\",\n            \"launch_file\": \"horus_backend.launch\",\n            \"check_command\": \"rospack find horus_backend_ros1\",\n            \"launch_command\": \"roslaunch horus_backend_ros1 horus_backend.launch\",\n            \"tcp_port\": 8081,\n        },\n    }\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.launch_backend","title":"launch_backend","text":"<pre><code>launch_backend()\n</code></pre> <p>Launch the appropriate backend</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def launch_backend(self):\n    \"\"\"Launch the appropriate backend\"\"\"\n    from .spinner import Spinner\n\n    if not self._is_backend_running():\n        spinner = Spinner(f\"Starting {self.backend_type.upper()} backend\")\n        spinner.start()\n\n        self._start_backend_process()\n        self._wait_for_backend_ready_silent()\n\n        spinner.stop()\n        config = self.backend_configs[self.backend_type]\n        print(\n            f\"  \\033[92m\u2713\\033[0m Backend startup: \"\n            f\"\\033[90mReady on port {config['tcp_port']}\\033[0m\"\n        )\n    else:\n        print(\"  \\033[92m\u2713\\033[0m Backend status: \\033[90mAlready running\\033[0m\")\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.test_connection","title":"test_connection","text":"<pre><code>test_connection()\n</code></pre> <p>Test connection to backend</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def test_connection(self):\n    \"\"\"Test connection to backend\"\"\"\n    return self._is_backend_running()\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.test_unity_endpoint","title":"test_unity_endpoint","text":"<pre><code>test_unity_endpoint()\n</code></pre> <p>Test Unity TCP endpoint connection</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def test_unity_endpoint(self):\n    \"\"\"Test Unity TCP endpoint connection\"\"\"\n    return self._is_unity_endpoint_running()\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.get_unity_port","title":"get_unity_port","text":"<pre><code>get_unity_port()\n</code></pre> <p>Get Unity TCP endpoint port</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def get_unity_port(self):\n    \"\"\"Get Unity TCP endpoint port\"\"\"\n    return self.backend_configs[self.backend_type].get(\"unity_port\", 10000)\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.get_port","title":"get_port","text":"<pre><code>get_port()\n</code></pre> <p>Get backend TCP port</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def get_port(self):\n    \"\"\"Get backend TCP port\"\"\"\n    return self.backend_configs[self.backend_type][\"tcp_port\"]\n</code></pre>"},{"location":"api/horus/utils/backend_manager/#horus.utils.backend_manager.BackendManager.stop_backend","title":"stop_backend","text":"<pre><code>stop_backend()\n</code></pre> <p>Stop the backend process and all related ROS2 nodes</p> Source code in <code>horus/utils/backend_manager.py</code> <pre><code>def stop_backend(self):\n    \"\"\"Stop the backend process and all related ROS2 nodes\"\"\"\n    # Prevent duplicate shutdown calls\n    if self._shutdown_called:\n        return\n    self._shutdown_called = True\n\n    print(\"\\033[90mStopping HORUS backend processes...\\033[0m\")\n\n    # First, try to stop our launched process gracefully\n    if self.backend_process:\n        try:\n            # Send SIGTERM to the process group (this will stop both\n            # backend and unity endpoint)\n            os.killpg(os.getpgid(self.backend_process.pid), 15)\n            self.backend_process.wait(timeout=8)\n            print(\"\\033[90m  \u2713 Launch process stopped gracefully\\033[0m\")\n        except (ProcessLookupError, subprocess.TimeoutExpired):\n            # Force kill if graceful shutdown fails\n            try:\n                os.killpg(os.getpgid(self.backend_process.pid), 9)\n                print(\"\\033[90m  \u2713 Launch process force-killed\\033[0m\")\n            except ProcessLookupError:\n                pass\n        finally:\n            self.backend_process = None\n\n    # Additionally, ensure all HORUS-related processes are stopped\n    self._cleanup_horus_processes()\n\n    print(\"\\033[90m  \u2713 All HORUS backend processes stopped\\033[0m\")\n</code></pre>"},{"location":"api/horus/utils/branding/","title":"Branding","text":""},{"location":"api/horus/utils/branding/#horus.utils.branding","title":"horus.utils.branding","text":""},{"location":"api/horus/utils/branding/#horus.utils.branding.show_ascii_art","title":"show_ascii_art","text":"<pre><code>show_ascii_art()\n</code></pre> <p>Display HORUS ASCII art header</p> Source code in <code>horus/utils/branding.py</code> <pre><code>def show_ascii_art():\n    \"\"\"Display HORUS ASCII art header\"\"\"\n    art = \"\"\"\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[95m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588   \u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588 \\033[94m\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[95m\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588    \u2588\u2588\u2588 \\033[91m     \u2591\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[96m\u2591\u2588\u2588\u2588   \u2588\u2588\u2588 \\033[94m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[95m\u2588\u2588\u2588   \u2591\u2588\u2588\u2588  \\033[35m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\033[91m\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\033[0m  # noqa: E501\n\\033[90m\u2591\u2591\u2591   \u2591\u2591\u2591  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \u2591\u2591\u2591   \u2591\u2591\u2591   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591   \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\033[0m\n\n\\033[94m           Holistic Operational Reality\\033[0m\n\\033[95m              for Unified Systems\\033[0m\n\"\"\"\n    print(art)\n    print(f\"\ud83e\udd16 HORUS Mixed Reality Robot Management SDK v{__version__}\")\n    print(\"\ud83c\udfd7\ufe0f  Developed at RICE Lab, University of Genoa\")\n    print(\"=\" * 60)\n</code></pre>"},{"location":"api/horus/utils/logging/","title":"Logging","text":""},{"location":"api/horus/utils/logging/#horus.utils.logging","title":"horus.utils.logging","text":"<p>Logging utilities for HORUS SDK</p>"},{"location":"api/horus/utils/requirements_checker/","title":"Requirements checker","text":""},{"location":"api/horus/utils/requirements_checker/#horus.utils.requirements_checker","title":"horus.utils.requirements_checker","text":""},{"location":"api/horus/utils/requirements_checker/#horus.utils.requirements_checker.RequirementsChecker","title":"RequirementsChecker","text":"<pre><code>RequirementsChecker()\n</code></pre> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def __init__(self):\n    self.backend_requirements = {\n        \"ros2\": [\n            (\"ROS2 Installation\", self._check_ros2_installation),\n            (\"HORUS Backend Package\", self._check_horus_backend_package),\n            (\"Network Port 8080\", self._check_port_availability),\n            (\"Unity TCP Endpoint (Port 10000)\", self._check_unity_endpoint),\n        ],\n        \"ros1\": [\n            (\"ROS1 Installation\", self._check_ros1_installation),\n            (\"HORUS Backend Package\", self._check_horus_backend_ros1_package),\n            (\"Network Port 8081\", self._check_port_availability),\n        ],\n    }\n</code></pre>"},{"location":"api/horus/utils/requirements_checker/#horus.utils.requirements_checker.RequirementsChecker.get_backend_checks","title":"get_backend_checks","text":"<pre><code>get_backend_checks(backend_type)\n</code></pre> <p>Get the list of checks for a backend type</p> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def get_backend_checks(self, backend_type):\n    \"\"\"Get the list of checks for a backend type\"\"\"\n    if backend_type not in self.backend_requirements:\n        return [\n            (\n                \"Invalid Backend\",\n                lambda bt: (False, f\"Unknown backend: {backend_type}\"),\n            )\n        ]\n    return self.backend_requirements[backend_type]\n</code></pre>"},{"location":"api/horus/utils/requirements_checker/#horus.utils.requirements_checker.RequirementsChecker.check_backend","title":"check_backend","text":"<pre><code>check_backend(backend_type)\n</code></pre> <p>Check all requirements for specified backend</p> Source code in <code>horus/utils/requirements_checker.py</code> <pre><code>def check_backend(self, backend_type):\n    \"\"\"Check all requirements for specified backend\"\"\"\n    requirements = {}\n\n    if backend_type not in self.backend_requirements:\n        return {\n            \"Invalid Backend\": {\n                \"available\": False,\n                \"message\": f\"Unknown backend: {backend_type}\",\n            }\n        }\n\n    for req_name, check_func in self.backend_requirements[backend_type]:\n        try:\n            available, message = check_func(backend_type)\n            requirements[req_name] = {\"available\": available, \"message\": message}\n        except Exception as e:\n            requirements[req_name] = {\n                \"available\": False,\n                \"message\": f\"Check failed: {str(e)}\",\n            }\n\n    return requirements\n</code></pre>"},{"location":"api/horus/utils/spinner/","title":"Spinner","text":""},{"location":"api/horus/utils/spinner/#horus.utils.spinner","title":"horus.utils.spinner","text":""},{"location":"api/horus/utils/spinner/#horus.utils.spinner.Spinner","title":"Spinner","text":"<pre><code>Spinner(message='Loading', delay=0.1, style='default')\n</code></pre> Source code in <code>horus/utils/spinner.py</code> <pre><code>def __init__(self, message=\"Loading\", delay=0.1, style=\"default\"):\n    self.message = message\n    self.delay = delay\n    self.running = False\n    self.thread = None\n    self.style = style\n\n    # Different spinner styles\n    self.spinner_styles = {\n        \"default\": [\"\u280b\", \"\u2819\", \"\u2839\", \"\u2838\", \"\u283c\", \"\u2834\", \"\u2826\", \"\u2827\", \"\u2807\", \"\u280f\"],\n        \"dots\": [\"\u2808\", \"\u2810\", \"\u2820\", \"\u2880\", \"\u2840\", \"\u2804\", \"\u2802\", \"\u2801\"],\n        \"circle\": [\"\u25d0\", \"\u25d3\", \"\u25d1\", \"\u25d2\"],\n        \"arrows\": [\"\u2190\", \"\u2196\", \"\u2191\", \"\u2197\", \"\u2192\", \"\u2198\", \"\u2193\", \"\u2199\"],\n        \"pulse\": [\"\u25cf\", \"\u25cf\", \"\u25cf\", \"\u25cb\", \"\u25cb\", \"\u25cb\"],\n    }\n\n    self.spinner_chars = self.spinner_styles.get(\n        style, self.spinner_styles[\"default\"]\n    )\n    self.current_char = 0\n</code></pre>"},{"location":"api/horus/utils/spinner/#horus.utils.spinner.Spinner.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the spinner</p> Source code in <code>horus/utils/spinner.py</code> <pre><code>def start(self):\n    \"\"\"Start the spinner\"\"\"\n    if not self.running:\n        self.running = True\n        self.thread = threading.Thread(target=self._spin)\n        self.thread.daemon = True\n        self.thread.start()\n</code></pre>"},{"location":"api/horus/utils/spinner/#horus.utils.spinner.Spinner.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the spinner and clear the line</p> Source code in <code>horus/utils/spinner.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the spinner and clear the line\"\"\"\n    if self.running:\n        self.running = False\n        if self.thread:\n            self.thread.join()\n        # Clear the line\n        sys.stdout.write(f\"\\r{' ' * (len(self.message) + 10)}\\r\")\n        sys.stdout.flush()\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/","title":"Unity monitor","text":""},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor","title":"horus.utils.unity_monitor","text":"<p>Unity MR Connection Monitor</p>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor","title":"UnityConnectionMonitor","text":"<pre><code>UnityConnectionMonitor(unity_port: int = 10000)\n</code></pre> <p>Monitor Unity MR connections through ROS TCP Endpoint logs</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def __init__(self, unity_port: int = 10000):\n    self.unity_port = unity_port\n    self.is_monitoring = False\n    self.monitor_thread: Optional[threading.Thread] = None\n    self.connection_callback: Optional[Callable[[str, bool], None]] = None\n    self.connected_clients: set[str] = set()\n    self.log_process: Optional[subprocess.Popen] = None\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.set_connection_callback","title":"set_connection_callback","text":"<pre><code>set_connection_callback(\n    callback: Callable[[str, bool], None],\n)\n</code></pre> <p>Set callback function for connection events</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[str, bool], None]</code> <p>Function called with (ip_address, is_connected)</p> required Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def set_connection_callback(self, callback: Callable[[str, bool], None]):\n    \"\"\"Set callback function for connection events\n\n    Args:\n        callback: Function called with (ip_address, is_connected)\n    \"\"\"\n    self.connection_callback = callback\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.start_monitoring","title":"start_monitoring","text":"<pre><code>start_monitoring()\n</code></pre> <p>Start monitoring Unity connections</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def start_monitoring(self):\n    \"\"\"Start monitoring Unity connections\"\"\"\n    if self.is_monitoring:\n        return\n\n    self.is_monitoring = True\n    self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)\n    self.monitor_thread.start()\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.stop_monitoring","title":"stop_monitoring","text":"<pre><code>stop_monitoring()\n</code></pre> <p>Stop monitoring Unity connections</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def stop_monitoring(self):\n    \"\"\"Stop monitoring Unity connections\"\"\"\n    self.is_monitoring = False\n    # Note: log_process is currently always None, placeholder for future use\n    if self.log_process is not None:\n        self.log_process.terminate()\n    if self.monitor_thread:\n        self.monitor_thread.join(timeout=2)\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.get_current_connections_debug","title":"get_current_connections_debug","text":"<pre><code>get_current_connections_debug()\n</code></pre> <p>Get current connections using ss - for debugging</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def get_current_connections_debug(self):\n    \"\"\"Get current connections using ss - for debugging\"\"\"\n    try:\n        result = subprocess.run(\n            [\"ss\", \"-tn\"], capture_output=True, text=True, timeout=5\n        )\n\n        connections = []\n        if result.returncode == 0:\n            for line in result.stdout.split(\"\\n\"):\n                if line.strip() and (\"ESTAB\" in line or \"State\" in line):\n                    connections.append(line.strip())\n        return connections\n    except Exception:\n        return []\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.debug_connections","title":"debug_connections","text":"<pre><code>debug_connections()\n</code></pre> <p>Debug method to show current connections</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def debug_connections(self):\n    \"\"\"Debug method to show current connections\"\"\"\n    connections = self.get_current_connections_debug()\n    print(\n        f\"\\n\\033[93mDEBUG: Current ss connections on port {self.unity_port}:\\033[0m\"\n    )\n    for conn in connections:\n        print(f\"  {conn}\")\n    print(f\"\\033[93mDEBUG: Tracked clients: {self.connected_clients}\\033[0m\\n\")\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.get_connected_clients","title":"get_connected_clients","text":"<pre><code>get_connected_clients() -&gt; set\n</code></pre> <p>Get currently connected client IPs</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def get_connected_clients(self) -&gt; set:\n    \"\"\"Get currently connected client IPs\"\"\"\n    return self.connected_clients.copy()\n</code></pre>"},{"location":"api/horus/utils/unity_monitor/#horus.utils.unity_monitor.UnityConnectionMonitor.is_unity_connected","title":"is_unity_connected","text":"<pre><code>is_unity_connected() -&gt; bool\n</code></pre> <p>Check if any Unity clients are connected</p> Source code in <code>horus/utils/unity_monitor.py</code> <pre><code>def is_unity_connected(self) -&gt; bool:\n    \"\"\"Check if any Unity clients are connected\"\"\"\n    return len(self.connected_clients) &gt; 0\n</code></pre>"},{"location":"api/tests/test_robot/","title":"Test robot","text":""},{"location":"api/tests/test_robot/#tests.test_robot","title":"tests.test_robot","text":"<p>Basic tests for HORUS SDK Robot module</p>"},{"location":"api/tests/test_robot/#tests.test_robot.test_robot_imports","title":"test_robot_imports","text":"<pre><code>test_robot_imports()\n</code></pre> <p>Test that robot module imports work correctly</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_robot_imports():\n    \"\"\"Test that robot module imports work correctly\"\"\"\n    try:\n        from horus.color import ColorManager  # noqa: F401\n        from horus.dataviz import DataViz  # noqa: F401\n        from horus.robot import Robot, RobotType  # noqa: F401\n        from horus.sensors import Camera, LaserScan, Lidar3D  # noqa: F401\n\n        assert True\n    except ImportError as e:\n        pytest.fail(f\"Failed to import robot modules: {e}\")\n</code></pre>"},{"location":"api/tests/test_robot/#tests.test_robot.test_robot_type_enum","title":"test_robot_type_enum","text":"<pre><code>test_robot_type_enum()\n</code></pre> <p>Test RobotType enum values</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_robot_type_enum():\n    \"\"\"Test RobotType enum values\"\"\"\n    from horus.robot import RobotType\n\n    # Test that basic robot types exist\n    assert hasattr(RobotType, \"WHEELED\")\n    assert hasattr(RobotType, \"LEGGED\")\n    assert hasattr(RobotType, \"AERIAL\")\n</code></pre>"},{"location":"api/tests/test_robot/#tests.test_robot.test_sensor_type_enum","title":"test_sensor_type_enum","text":"<pre><code>test_sensor_type_enum()\n</code></pre> <p>Test SensorType enum values</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_sensor_type_enum():\n    \"\"\"Test SensorType enum values\"\"\"\n    from horus.sensors import SensorType\n\n    # Test that basic sensor types exist\n    assert hasattr(SensorType, \"CAMERA\")\n    assert hasattr(SensorType, \"LIDAR_3D\")\n    assert hasattr(SensorType, \"LASER_SCAN\")\n    assert hasattr(SensorType, \"IMU\")\n    assert hasattr(SensorType, \"GPS\")\n    assert hasattr(SensorType, \"ODOMETRY\")\n\n    # Test enum values\n    assert SensorType.CAMERA.value == \"camera\"\n    assert SensorType.LASER_SCAN.value == \"laser_scan\"\n    assert SensorType.LIDAR_3D.value == \"lidar_3d\"\n</code></pre>"},{"location":"api/tests/test_robot/#tests.test_robot.test_basic_robot_creation","title":"test_basic_robot_creation","text":"<pre><code>test_basic_robot_creation()\n</code></pre> <p>Test basic robot creation without backend dependencies</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_basic_robot_creation():\n    \"\"\"Test basic robot creation without backend dependencies\"\"\"\n    from horus.robot import Robot, RobotType\n\n    # Create a simple robot without requiring ROS2 backend\n    robot = Robot(name=\"test_robot\", robot_type=RobotType.WHEELED)\n\n    assert robot.name == \"test_robot\"\n    assert robot.robot_type == RobotType.WHEELED\n    assert robot.metadata == {}  # Default empty metadata after __post_init__\n    assert robot.sensors == []  # No sensors by default\n\n    # Test robot methods\n    assert robot.get_type_str() == \"wheeled\"\n    assert robot.get_sensor_count() == 0\n    assert not robot.has_sensors()\n    assert not robot.is_registered_with_horus()\n</code></pre>"},{"location":"api/tests/test_robot/#tests.test_robot.test_robot_metadata","title":"test_robot_metadata","text":"<pre><code>test_robot_metadata()\n</code></pre> <p>Test robot metadata functionality</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_robot_metadata():\n    \"\"\"Test robot metadata functionality\"\"\"\n    from horus.robot import Robot, RobotType\n\n    robot = Robot(name=\"metadata_test\", robot_type=RobotType.LEGGED)\n\n    # Test metadata operations\n    robot.add_metadata(\"test_key\", \"test_value\")\n    assert robot.get_metadata(\"test_key\") == \"test_value\"\n    assert robot.get_metadata(\"nonexistent\", \"default\") == \"default\"\n\n    # Test metadata is stored in the dict\n    assert \"test_key\" in robot.metadata\n    assert robot.metadata[\"test_key\"] == \"test_value\"\n</code></pre>"},{"location":"api/tests/test_robot/#tests.test_robot.test_version_import","title":"test_version_import","text":"<pre><code>test_version_import()\n</code></pre> <p>Test that version can be imported</p> Source code in <code>tests/test_robot.py</code> <pre><code>def test_version_import():\n    \"\"\"Test that version can be imported\"\"\"\n    from horus.utils.branding import __version__\n\n    assert __version__ is not None\n    assert isinstance(__version__, str)\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Comprehensive examples demonstrating HORUS Mixed Reality robot fleet management capabilities.</p>"},{"location":"examples/#overview","title":"Overview","text":"<p>This section contains real-world examples showcasing how to connect various robot types to the HORUS MR system running on Quest 3.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":""},{"location":"examples/#getting-started-examples","title":"Getting Started Examples","text":"<ul> <li> <p>:material-clock-fast:{ .lg .middle } Basic Robot Connection</p> <p>Simple robot registration and MR visualization setup.</p> <p>:octicons-arrow-right-24: Basic Example</p> </li> <li> <p>:material-robot:{ .lg .middle } Carter Robot Integration</p> <p>Complete Carter robot setup with sensors and navigation.</p> <p>:octicons-arrow-right-24: Carter Example</p> </li> <li> <p>:material-account-group:{ .lg .middle } Multi-Robot Fleet</p> <p>Managing multiple robots simultaneously in MR.</p> <p>:octicons-arrow-right-24: Multi-Robot Example</p> </li> <li> <p>:material-puzzle:{ .lg .middle } Custom Robot Plugins</p> <p>Creating custom robot types and sensor configurations.</p> <p>:octicons-arrow-right-24: Plugin Example</p> </li> </ul>"},{"location":"examples/#example-categories","title":"Example Categories","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<ul> <li>Quick Test: Basic SDK initialization and backend connection</li> <li>First Robot: Step-by-step robot registration tutorial</li> <li>Sensor Integration: Adding cameras and LiDAR to robots</li> </ul>"},{"location":"examples/#advanced-features","title":"Advanced Features","text":"<ul> <li>Multi-Robot Management: Fleet coordination and color management</li> <li>Live Integration: Real-time robot data streaming to Quest 3</li> <li>Path Planning: Navigation visualization in Mixed Reality</li> </ul>"},{"location":"examples/#real-robot-examples","title":"Real Robot Examples","text":"<ul> <li>Carter Robot: NVIDIA Isaac Sim robot integration</li> <li>Custom Robots: Generic ROS2 robot setup</li> <li>Sensor Configurations: Various sensor combinations</li> </ul>"},{"location":"examples/#running-examples","title":"Running Examples","text":""},{"location":"examples/#prerequisites","title":"Prerequisites","text":"<p>Before running examples, ensure you have:</p> <pre><code># Source ROS2 environment\nsource /opt/ros/humble/setup.bash\n\n# Build and source HORUS workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\ncd ..\n</code></pre>"},{"location":"examples/#basic-example-structure","title":"Basic Example Structure","text":"<p>All examples follow this pattern:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nExample: [Description]\nPurpose: [What this example demonstrates]\n\"\"\"\n\nfrom horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan\nfrom horus.dataviz import DataViz\n\ndef main():\n    # 1. Initialize SDK\n    client = Client(backend='ros2')\n\n    # 2. Create robot\n    robot = Robot(\"example_robot\", RobotType.WHEELED)\n\n    # 3. Configure sensors\n    camera = Camera(\"camera\", \"/camera/image_raw\", \"camera_link\")\n    robot.add_sensor(camera)\n\n    # 4. Create MR visualization\n    dataviz = robot.create_dataviz()\n\n    # 5. Register with HORUS MR system\n    success, result = robot.register_with_horus(dataviz)\n\n    if success:\n        print(f\"\u2713 Robot registered with Quest 3: {result['robot_id']}\")\n        # Keep robot active for MR\n        input(\"Press Enter to stop...\")\n    else:\n        print(f\"\u2717 Registration failed: {result['error']}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/#available-example-files","title":"Available Example Files","text":"<p>The following example files are available in the repository:</p> File Description Complexity <code>quick_test.py</code> Basic SDK initialization and backend test Beginner <code>carter_robot_setup.py</code> Complete Carter robot with sensors Intermediate <code>live_robot_integration.py</code> Multi-robot live integration Advanced <code>color_assignment_path_planning.py</code> Color management and path visualization Intermediate <code>basic_initialization.py</code> Simple robot registration Beginner"},{"location":"examples/#example-usage-patterns","title":"Example Usage Patterns","text":""},{"location":"examples/#single-robot-pattern","title":"Single Robot Pattern","text":"<pre><code># Create and register a single robot\nrobot = Robot(\"scout_01\", RobotType.WHEELED)\nrobot.add_sensor(Camera(\"front_cam\", \"/camera/image_raw\", \"camera_link\"))\ndataviz = robot.create_dataviz()\nsuccess, result = robot.register_with_horus(dataviz)\n</code></pre>"},{"location":"examples/#multi-robot-pattern","title":"Multi-Robot Pattern","text":"<pre><code># Create multiple robots with automatic color assignment\nrobots = []\nfor i in range(3):\n    robot = Robot(f\"robot_{i:02d}\", RobotType.WHEELED)\n    robot.add_sensor(Camera(f\"cam_{i}\", f\"/robot_{i}/camera/image_raw\", \"camera_link\"))\n    dataviz = robot.create_dataviz()\n    success, result = robot.register_with_horus(dataviz)\n    if success:\n        robots.append(robot)\n</code></pre>"},{"location":"examples/#sensor-configuration-pattern","title":"Sensor Configuration Pattern","text":"<pre><code># Comprehensive sensor setup\ndef setup_sensors(robot: Robot):\n    # Multiple cameras\n    front_cam = Camera(\"front_cam\", \"/front_camera/image_raw\", \"front_camera_link\")\n    rear_cam = Camera(\"rear_cam\", \"/rear_camera/image_raw\", \"rear_camera_link\")\n\n    # LiDAR sensors\n    lidar_2d = LaserScan(\"lidar_2d\", \"/scan\", \"base_scan\")\n    lidar_3d = Lidar3D(\"lidar_3d\", \"/velodyne_points\", \"velodyne_link\")\n\n    # Add all sensors\n    for sensor in [front_cam, rear_cam, lidar_2d, lidar_3d]:\n        robot.add_sensor(sensor)\n</code></pre>"},{"location":"examples/#testing-examples","title":"Testing Examples","text":""},{"location":"examples/#running-individual-examples","title":"Running Individual Examples","text":"<pre><code># Run basic robot connection test\npython3 examples/quick_test.py\n\n# Run Carter robot example\npython3 examples/carter_robot_setup.py\n\n# Run multi-robot example\npython3 examples/live_robot_integration.py\n</code></pre>"},{"location":"examples/#quest-3-verification","title":"Quest 3 Verification","text":"<p>After running examples:</p> <ol> <li>Note connection details from terminal output</li> <li>Open HORUS MR app on Quest 3</li> <li>Enter IP and port shown in terminal</li> <li>Look for robots in 3D space with assigned colors</li> </ol>"},{"location":"examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"examples/#common-issues","title":"Common Issues","text":"<p>Robot Not Visible in Quest 3</p> <p>Problem: Example runs but robot not visible in MR</p> <p>Solution: - Verify Quest 3 connected to same network - Check IP address and port configuration - Ensure example script is still running - Restart HORUS MR app</p> <p>Registration Failed</p> <p>Problem: Robot registration fails in example</p> <p>Solution: <pre><code># Check backend status\npython3 examples/quick_test.py\n\n# Verify ROS2 environment\nsource horus_ros2_ws/install/setup.bash\n</code></pre></p>"},{"location":"examples/#debug-mode","title":"Debug Mode","text":"<p>Enable debug output in examples:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Run example with debug output\nclient = Client(backend='ros2', debug=True)\n</code></pre>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>To add new examples:</p> <ol> <li>Create example file in <code>examples/</code> directory</li> <li>Follow naming convention: <code>descriptive_name.py</code></li> <li>Include comprehensive docstring with purpose and usage</li> <li>Add error handling and user-friendly output</li> <li>Test with Quest 3 to verify MR functionality</li> </ol>"},{"location":"examples/#example-template","title":"Example Template","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nHORUS Example: [Your Example Name]\n==================================\n\nPurpose: [What this example demonstrates]\nRequirements: [Any special requirements]\nUsage: python3 examples/your_example.py\n\nThis example shows how to [describe functionality]\n\"\"\"\n\nfrom horus import Client, Robot, RobotType\nimport time\n\ndef main():\n    \"\"\"Main example function.\"\"\"\n    print(\"\ud83d\ude80 HORUS Example: [Your Example Name]\")\n    print(\"=\" * 50)\n\n    try:\n        # Your example code here\n        client = Client(backend='ros2')\n        # ... rest of example\n\n        print(\"\u2713 Example completed successfully!\")\n\n    except Exception as e:\n        print(f\"\u2717 Example failed: {e}\")\n        return False\n\n    return True\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<p>After exploring examples:</p> <ol> <li>User Guide - Comprehensive feature documentation</li> <li>API Reference - Complete API documentation</li> <li>Developer Guide - Advanced development topics</li> </ol> <p>Choose an example above to start exploring HORUS Mixed Reality robot fleet management capabilities!</p>"},{"location":"getting-started/","title":"Getting Started with HORUS","text":"<p>Welcome to HORUS SDK! This section will guide you through connecting your ROS robots to the HORUS Mixed Reality fleet management system.</p>"},{"location":"getting-started/#what-is-horus","title":"What is HORUS?","text":"<p>HORUS is a Mixed Reality robot fleet management system that runs on Meta Quest 3 headsets. It allows operators to:</p> <ul> <li>Visualize multiple robots simultaneously in immersive 3D environments</li> <li>Control robot fleets spatially through intuitive MR gestures and interfaces</li> <li>Monitor real-time sensor data with 3D overlays (cameras, LiDAR, telemetry)</li> <li>Coordinate multi-robot missions with spatial planning and visualization</li> </ul>"},{"location":"getting-started/#how-the-sdk-works","title":"How the SDK Works","text":"<p>The HORUS SDK connects your ROS robots to the Quest 3 MR interface:</p> <pre><code>graph LR\n    A[Your ROS2 Robots] --&gt; B[HORUS SDK]\n    B --&gt; C[Backend Server]\n    C --&gt; D[Quest 3 MR App]\n    E[Robot Operator] --&gt; D\n\n    style A fill:#fce4ec\n    style B fill:#e1f5fe\n    style C fill:#f3e5f5\n    style D fill:#fff3e0\n    style E fill:#e3f2fd</code></pre>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Quest 3 Required</p> <p>HORUS is a Mixed Reality system that requires:</p> <ul> <li>Meta Quest 3 headset with HORUS MR app installed</li> <li>ROS2 Humble environment for robot connectivity</li> <li>Python 3.10+ for SDK development</li> </ul>"},{"location":"getting-started/#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p>:material-clock-fast:{ .lg .middle } Quick Start</p> <p>Get your first robot connected to HORUS MR in 5 minutes.</p> <p>:octicons-arrow-right-24: Quick Start</p> </li> <li> <p>:material-download:{ .lg .middle } Installation</p> <p>Detailed setup instructions for different environments.</p> <p>:octicons-arrow-right-24: Installation Guide</p> </li> <li> <p>:material-robot:{ .lg .middle } First Robot</p> <p>Step-by-step tutorial for MR robot registration.</p> <p>:octicons-arrow-right-24: First Robot</p> </li> </ul>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":""},{"location":"getting-started/#sdk-basics","title":"SDK Basics","text":"<ul> <li>How to initialize the HORUS SDK and connect to the backend</li> <li>Robot modeling and sensor configuration for MR visualization</li> <li>Registration workflow for Quest 3 integration</li> </ul>"},{"location":"getting-started/#mr-integration","title":"MR Integration","text":"<ul> <li>Understanding the Quest 3 \u2192 Robot communication flow</li> <li>Real-time sensor data streaming to Mixed Reality</li> <li>Multi-robot fleet management with automatic color coding</li> </ul>"},{"location":"getting-started/#advanced-features","title":"Advanced Features","text":"<ul> <li>Custom robot types and sensor configurations</li> <li>Path planning visualization in 3D space</li> <li>Live connection monitoring and fleet status tracking</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you've completed the getting started guide, explore:</p> <ul> <li>User Guide - Comprehensive MR fleet management features</li> <li>Developer Guide - Advanced SDK development</li> <li>API Reference - Complete SDK API documentation</li> <li>Examples - Real-world robot integration demos</li> </ul>"},{"location":"getting-started/first-robot/","title":"Your First Robot in Mixed Reality","text":"<p>This tutorial will guide you through connecting your first robot to the HORUS Mixed Reality system running on Quest 3.</p>"},{"location":"getting-started/first-robot/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have:</p> <ul> <li>\u2705 Connected a robot to the HORUS MR system</li> <li>\u2705 Configured sensors for 3D visualization</li> <li>\u2705 Seen your robot appear in Quest 3 with live data</li> <li>\u2705 Understood the complete robot-to-MR workflow</li> </ul>"},{"location":"getting-started/first-robot/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>HORUS SDK installed (see Installation Guide)</li> <li>ROS2 Humble environment sourced</li> <li>Quest 3 with HORUS MR app ready</li> <li>Network connectivity between all devices</li> </ul>"},{"location":"getting-started/first-robot/#step-1-initialize-the-sdk","title":"Step 1: Initialize the SDK","text":"<p>Create a new file called <code>my_first_mr_robot.py</code>:</p> my_first_mr_robot.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nMy First HORUS Mixed Reality Robot\n==================================\nThis example shows how to connect a robot to Quest 3 MR visualization\n\"\"\"\n\nfrom horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan, Lidar3D\nfrom horus.dataviz import DataViz\nimport time\n\ndef main():\n    print(\"\ud83d\ude80 HORUS Mixed Reality Robot Setup\")\n    print(\"===================================\")\n\n    # Step 1: Initialize SDK backend connection\n    print(\"\\n1. Connecting to HORUS backend...\")\n    client = Client(backend='ros2')\n    print(\"   \u2713 Connected to MR backend system\")\n</code></pre>"},{"location":"getting-started/first-robot/#step-2-create-your-robot","title":"Step 2: Create Your Robot","text":"<p>Add robot creation to your script:</p> <pre><code>    # Step 2: Create robot for MR visualization\n    print(\"\\n2. Creating robot for Mixed Reality...\")\n    robot = Robot(\n        name=\"my_first_mr_robot\",\n        robot_type=RobotType.WHEELED,\n        description=\"My first robot in HORUS MR\"\n    )\n    print(f\"   \u2713 Robot created: {robot.name}\")\n</code></pre>"},{"location":"getting-started/first-robot/#step-3-configure-sensors-for-mr","title":"Step 3: Configure Sensors for MR","text":"<p>Add sensors that will appear in Quest 3:</p> <pre><code>    # Step 3: Add sensors for MR visualization\n    print(\"\\n3. Configuring sensors for Quest 3...\")\n\n    # Front camera - will show live feed in MR\n    front_camera = Camera(\n        name=\"front_camera\",\n        topic=\"/camera/image_raw\",\n        frame_id=\"camera_link\",\n        description=\"Front-facing camera for MR overlay\"\n    )\n\n    # LiDAR - will show 3D point cloud in MR\n    lidar = LaserScan(\n        name=\"front_lidar\",\n        topic=\"/scan\",\n        frame_id=\"base_scan\",\n        description=\"Front LiDAR for 3D environment mapping\"\n    )\n\n    # Optional: 3D LiDAR for richer point clouds\n    # lidar_3d = Lidar3D(\n    #     name=\"3d_lidar\",\n    #     topic=\"/lidar_points\",\n    #     frame_id=\"lidar_link\"\n    # )\n\n    robot.add_sensor(front_camera)\n    robot.add_sensor(lidar)\n\n    print(f\"   \u2713 Added {robot.get_sensor_count()} sensors for MR\")\n</code></pre>"},{"location":"getting-started/first-robot/#step-4-create-mr-visualization","title":"Step 4: Create MR Visualization","text":"<p>Configure how your robot appears in Quest 3:</p> <pre><code>    # Step 4: Create Mixed Reality visualization\n    print(\"\\n4. Setting up MR visualization...\")\n\n    # Create 3D visualization configuration\n    dataviz = robot.create_dataviz()\n\n    # Add path planning visualization (if your robot has navigation)\n    robot.add_path_planning_to_dataviz(\n        dataviz,\n        global_path_topic=\"/global_path\",\n        local_path_topic=\"/local_path\"\n    )\n\n    print(\"   \u2713 MR visualization configured\")\n</code></pre>"},{"location":"getting-started/first-robot/#step-5-register-with-horus-mr-system","title":"Step 5: Register with HORUS MR System","text":"<p>Connect your robot to Quest 3:</p> <pre><code>    # Step 5: Register robot with HORUS MR system\n    print(\"\\n5. Registering robot with Quest 3...\")\n\n    success, result = robot.register_with_horus(dataviz)\n\n    if success:\n        print(\"   \u2705 SUCCESS! Robot registered with HORUS MR\")\n        print(f\"   \ud83d\udcf1 Robot ID: {result.get('robot_id')}\")\n        print(f\"   \ud83c\udfa8 MR Color: {result.get('assigned_color')}\")\n        print(f\"   \ud83d\udce1 Sensors: {robot.get_sensor_count()} active\")\n\n        # Display connection info for Quest 3\n        print(\"\\n\ud83c\udfae Quest 3 Connection Info:\")\n        print(\"   ===========================\")\n        print(f\"   IP Address: {result.get('backend_ip', 'localhost')}\")\n        print(f\"   Port: 10000\")\n        print(\"   Status: Ready for MR connection\")\n\n        return True\n    else:\n        print(f\"   \u274c Registration failed: {result.get('error')}\")\n        return False\n</code></pre>"},{"location":"getting-started/first-robot/#step-6-keep-robot-active","title":"Step 6: Keep Robot Active","text":"<p>Add the monitoring loop:</p> <pre><code>    # Step 6: Keep robot active for MR\n    print(\"\\n6. Robot active - Ready for Quest 3!\")\n    print(\"   ====================================\")\n    print(\"   \ud83d\udd04 Robot is now streaming to MR system\")\n    print(\"   \ud83d\udcf1 Open HORUS app on Quest 3\")\n    print(\"   \ud83c\udfaf Look for your robot in 3D space\")\n    print(\"\\n   Press Ctrl+C to stop robot...\")\n\n    try:\n        while True:\n            # Robot stays active for MR visualization\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"\\n\ud83d\uded1 Shutting down robot...\")\n        print(\"   \u2713 Robot disconnected from MR system\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"getting-started/first-robot/#complete-script","title":"Complete Script","text":"<p>Here's the complete <code>my_first_mr_robot.py</code>:</p> my_first_mr_robot.py<pre><code>#!/usr/bin/env python3\n\"\"\"\nMy First HORUS Mixed Reality Robot\n==================================\nThis example shows how to connect a robot to Quest 3 MR visualization\n\"\"\"\n\nfrom horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan\nfrom horus.dataviz import DataViz\nimport time\n\ndef main():\n    print(\"\ud83d\ude80 HORUS Mixed Reality Robot Setup\")\n    print(\"===================================\")\n\n    # Step 1: Initialize SDK backend connection\n    print(\"\\n1. Connecting to HORUS backend...\")\n    client = Client(backend='ros2')\n    print(\"   \u2713 Connected to MR backend system\")\n\n    # Step 2: Create robot for MR visualization\n    print(\"\\n2. Creating robot for Mixed Reality...\")\n    robot = Robot(\n        name=\"my_first_mr_robot\",\n        robot_type=RobotType.WHEELED,\n        description=\"My first robot in HORUS MR\"\n    )\n    print(f\"   \u2713 Robot created: {robot.name}\")\n\n    # Step 3: Add sensors for MR visualization\n    print(\"\\n3. Configuring sensors for Quest 3...\")\n\n    front_camera = Camera(\n        name=\"front_camera\",\n        topic=\"/camera/image_raw\",\n        frame_id=\"camera_link\",\n        description=\"Front-facing camera for MR overlay\"\n    )\n\n    lidar = LaserScan(\n        name=\"front_lidar\",\n        topic=\"/scan\",\n        frame_id=\"base_scan\",\n        description=\"Front LiDAR for 3D environment mapping\"\n    )\n\n    robot.add_sensor(front_camera)\n    robot.add_sensor(lidar)\n\n    print(f\"   \u2713 Added {robot.get_sensor_count()} sensors for MR\")\n\n    # Step 4: Create Mixed Reality visualization\n    print(\"\\n4. Setting up MR visualization...\")\n\n    dataviz = robot.create_dataviz()\n\n    robot.add_path_planning_to_dataviz(\n        dataviz,\n        global_path_topic=\"/global_path\",\n        local_path_topic=\"/local_path\"\n    )\n\n    print(\"   \u2713 MR visualization configured\")\n\n    # Step 5: Register robot with HORUS MR system\n    print(\"\\n5. Registering robot with Quest 3...\")\n\n    success, result = robot.register_with_horus(dataviz)\n\n    if success:\n        print(\"   \u2705 SUCCESS! Robot registered with HORUS MR\")\n        print(f\"   \ud83d\udcf1 Robot ID: {result.get('robot_id')}\")\n        print(f\"   \ud83c\udfa8 MR Color: {result.get('assigned_color')}\")\n        print(f\"   \ud83d\udce1 Sensors: {robot.get_sensor_count()} active\")\n\n        print(\"\\n\ud83c\udfae Quest 3 Connection Info:\")\n        print(\"   ===========================\")\n        print(f\"   IP Address: {result.get('backend_ip', 'localhost')}\")\n        print(f\"   Port: 10000\")\n        print(\"   Status: Ready for MR connection\")\n\n        # Step 6: Keep robot active for MR\n        print(\"\\n6. Robot active - Ready for Quest 3!\")\n        print(\"   ====================================\")\n        print(\"   \ud83d\udd04 Robot is now streaming to MR system\")\n        print(\"   \ud83d\udcf1 Open HORUS app on Quest 3\")\n        print(\"   \ud83c\udfaf Look for your robot in 3D space\")\n        print(\"\\n   Press Ctrl+C to stop robot...\")\n\n        try:\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            print(\"\\n\ud83d\uded1 Shutting down robot...\")\n            print(\"   \u2713 Robot disconnected from MR system\")\n\n    else:\n        print(f\"   \u274c Registration failed: {result.get('error')}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"getting-started/first-robot/#run-your-robot","title":"Run Your Robot","text":"<p>Execute your script:</p> <pre><code># Make sure ROS2 is sourced\nsource horus_ros2_ws/install/setup.bash\n\n# Run your MR robot\npython3 my_first_mr_robot.py\n</code></pre>"},{"location":"getting-started/first-robot/#expected-output","title":"Expected Output","text":"<p>You should see:</p> <pre><code>\ud83d\ude80 HORUS Mixed Reality Robot Setup\n===================================\n\n1. Connecting to HORUS backend...\n   \u2713 Connected to MR backend system\n\n2. Creating robot for Mixed Reality...\n   \u2713 Robot created: my_first_mr_robot\n\n3. Configuring sensors for Quest 3...\n   \u2713 Added 2 sensors for MR\n\n4. Setting up MR visualization...\n   \u2713 MR visualization configured\n\n5. Registering robot with Quest 3...\n   \u2705 SUCCESS! Robot registered with HORUS MR\n   \ud83d\udcf1 Robot ID: robot_001\n   \ud83c\udfa8 MR Color: #FF6B35\n   \ud83d\udce1 Sensors: 2 active\n\n\ud83c\udfae Quest 3 Connection Info:\n   ===========================\n   IP Address: 192.168.1.100\n   Port: 10000\n   Status: Ready for MR connection\n\n6. Robot active - Ready for Quest 3!\n   ====================================\n   \ud83d\udd04 Robot is now streaming to MR system\n   \ud83d\udcf1 Open HORUS app on Quest 3\n   \ud83c\udfaf Look for your robot in 3D space\n\n   Press Ctrl+C to stop robot...\n</code></pre>"},{"location":"getting-started/first-robot/#quest-3-experience","title":"Quest 3 Experience","text":"<p>Once your robot is registered:</p> <ol> <li>Put on Quest 3 headset</li> <li>Open HORUS MR app</li> <li>Connect to IP address shown (192.168.1.100:10000)</li> <li>Look around - you should see your robot in 3D space</li> <li>Robot appears with unique color (e.g., orange #FF6B35)</li> <li>Live sensor data overlays in MR (camera feed, LiDAR points)</li> </ol>"},{"location":"getting-started/first-robot/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-robot/#robot-not-appearing-in-quest-3","title":"Robot Not Appearing in Quest 3","text":"<p>No Robot Visible</p> <p>Problem: Robot registered but not visible in Quest 3</p> <p>Solutions: - Verify Quest 3 connected to same network - Check IP address and port 10000 - Restart HORUS MR app - Confirm robot script is still running</p>"},{"location":"getting-started/first-robot/#connection-issues","title":"Connection Issues","text":"<p>Registration Failed</p> <p>Problem: Robot registration fails</p> <p>Solutions: <pre><code># Check backend status\npython3 examples/quick_test.py\n\n# Verify ROS2 environment\nsource horus_ros2_ws/install/setup.bash\nros2 node list\n</code></pre></p>"},{"location":"getting-started/first-robot/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully connected your first robot to HORUS Mixed Reality. Next:</p> <ol> <li>User Guide - Learn about advanced MR features</li> <li>Examples - Explore multi-robot scenarios</li> <li>API Reference - Dive deeper into SDK capabilities</li> </ol>"},{"location":"getting-started/first-robot/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-started/first-robot/#multi-robot-fleet","title":"Multi-Robot Fleet","text":"<pre><code># Create multiple robots for fleet management\nrobot_1 = Robot(\"scout_01\", RobotType.WHEELED)\nrobot_2 = Robot(\"scout_02\", RobotType.WHEELED)\n\n# Each gets unique color automatically\n# Quest 3 shows both robots simultaneously\n</code></pre>"},{"location":"getting-started/first-robot/#custom-robot-types","title":"Custom Robot Types","text":"<pre><code># Create custom robot configurations\ncustom_robot = Robot(\"delivery_bot\", RobotType.CUSTOM)\ncustom_robot.add_custom_property(\"payload_capacity\", \"50kg\")\ncustom_robot.add_custom_property(\"battery_type\", \"LiFePO4\")\n</code></pre>"},{"location":"getting-started/first-robot/#advanced-sensor-configuration","title":"Advanced Sensor Configuration","text":"<pre><code># High-resolution 3D LiDAR\nlidar_3d = Lidar3D(\n    name=\"velodyne_128\",\n    topic=\"/velodyne_points\",\n    frame_id=\"velodyne_link\",\n    range_max=200.0,\n    point_cloud_color=\"#00FF00\"\n)\n</code></pre> <p>For more advanced features, see the User Guide and Developer Guide.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers different installation methods for the HORUS SDK, from quick testing to production deployment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Ubuntu 22.04 LTS (recommended) or similar Linux distribution</li> <li>Python: 3.10 or higher</li> <li>ROS2: Humble Hawksbill (required for robot integration)</li> <li>Meta Quest 3: Required for full Mixed Reality experience</li> </ul>"},{"location":"getting-started/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Development Machine: Modern Linux workstation with network connectivity</li> <li>Meta Quest 3: With HORUS MR app installed</li> <li>ROS2 Robots: Any ROS2 Humble compatible robot system</li> </ul>"},{"location":"getting-started/installation/#network-requirements","title":"Network Requirements","text":"<ul> <li>Local Network: All devices (development machine, Quest 3, robots) on same network</li> <li>Open Ports: 8080 (SDK backend), 10000 (Unity TCP bridge)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-quick-test-recommended-for-first-time-users","title":"Method 1: Quick Test (Recommended for First-Time Users)","text":"<p>This method requires no installation and is perfect for testing:</p> <pre><code># Clone the repository with submodules\ngit clone --recursive https://github.com/RICE-unige/horus_sdk.git\ncd horus_sdk\n\n# Build the ROS2 workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\ncd ..\n\n# Test the SDK\npython3 examples/quick_test.py\n</code></pre> <p>Expected Output: <pre><code>\ud83d\ude80 HORUS SDK Backend Initialization\n=====================================\n\n\u2713 ROS2 Installation: ROS2 humble detected\n\u2713 HORUS Backend Package: Found and ready\n\u2713 Network Port 8080: Available for SDK communication\n\u2713 Backend startup: Ready on port 8080\n\u2713 Quest 3 Connection: Ready for MR app on port 10000\n</code></pre></p>"},{"location":"getting-started/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For active development and custom robot integration:</p> <pre><code># Clone and build\ngit clone --recursive https://github.com/RICE-unige/horus_sdk.git\ncd horus_sdk\n\n# Install Python SDK in development mode\npip install -e python/\n\n# Build ROS2 workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\ncd ..\n\n# Verify installation\npython3 -c \"from horus import Client; print('\u2713 HORUS SDK installed')\"\n</code></pre>"},{"location":"getting-started/installation/#method-3-production-installation","title":"Method 3: Production Installation","text":"<p>For deployment in production environments:</p> <pre><code># Install from PyPI (when available)\npip install horus-sdk\n\n# Clone backend and examples\ngit clone --recursive https://github.com/RICE-unige/horus_sdk.git\ncd horus_sdk/horus_ros2_ws\ncolcon build\nsource install/setup.bash\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#test-sdk-backend-connection","title":"Test SDK Backend Connection","text":"<pre><code># Source ROS2 environment\nsource horus_ros2_ws/install/setup.bash\n\n# Run backend test\npython3 examples/quick_test.py\n</code></pre> <p>Look for these success indicators: - \u2713 ROS2 installation detected - \u2713 Backend package found - \u2713 Ports 8080 and 10000 available - \u2713 Backend server running</p>"},{"location":"getting-started/installation/#test-robot-registration","title":"Test Robot Registration","text":"<pre><code># Run robot registration example\npython3 examples/carter_robot_setup.py\n</code></pre> <p>Expected output includes: - Robot creation and sensor configuration - Backend connection establishment - Successful robot registration with assigned color - Quest 3 connection monitoring</p>"},{"location":"getting-started/installation/#quest-3-setup","title":"Quest 3 Setup","text":""},{"location":"getting-started/installation/#install-horus-mr-app","title":"Install HORUS MR App","text":"<ol> <li>Download HORUS MR App from Meta Quest Store (when available)</li> <li>Enable Developer Mode on Quest 3 if using development builds</li> <li>Connect to Same Network as your development machine</li> </ol>"},{"location":"getting-started/installation/#configure-connection","title":"Configure Connection","text":"<ol> <li> <p>Note IP Address from SDK backend output:    <pre><code>\ud83c\udfae HORUS Mixed Reality Connection Ready\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nIP Address: 192.168.1.100\nPort: 10000\n</code></pre></p> </li> <li> <p>Enter Connection Details in Quest 3 HORUS app</p> </li> <li>Verify Connection - you should see:    <pre><code>\u2713 Quest 3 Connected: Device detected from 192.168.1.50\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>ROS2 Not Found</p> <p>Error: <code>ROS2 Installation: Not detected</code></p> <p>Solution: <pre><code># Install ROS2 Humble\nsudo apt update\nsudo apt install ros-humble-desktop\n\n# Source ROS2\nsource /opt/ros/humble/setup.bash\necho \"source /opt/ros/humble/setup.bash\" &gt;&gt; ~/.bashrc\n</code></pre></p> <p>Port Already in Use</p> <p>Error: <code>Port 8080 is in use</code></p> <p>Solution: <pre><code># Kill existing processes\npkill -f horus_backend_node\npkill -f default_server_endpoint\n\n# Or use different port\nexport HORUS_SDK_PORT=8081\n</code></pre></p> <p>Quest 3 Not Connecting</p> <p>Error: No Quest 3 connection detected</p> <p>Solution: - Verify Quest 3 and development machine are on same network - Check firewall settings (ports 8080, 10000) - Restart HORUS MR app on Quest 3 - Verify IP address configuration</p>"},{"location":"getting-started/installation/#build-issues","title":"Build Issues","text":"<p>Colcon Build Failed</p> <p>Error: Build failures in ROS2 workspace</p> <p>Solution: <pre><code># Install dependencies\nsudo apt update\nsudo apt install python3-colcon-common-extensions\n\n# Clean and rebuild\ncd horus_ros2_ws\nrm -rf build install log\ncolcon build\n</code></pre></p>"},{"location":"getting-started/installation/#python-dependencies","title":"Python Dependencies","text":"<p>Missing Python Modules</p> <p>Error: <code>ModuleNotFoundError</code></p> <p>Solution: <pre><code># Install Python dependencies\npip install -r python/requirements.txt\n\n# Or install specific modules\npip install pyyaml rclpy\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Quick Start - Create your first robot connection</li> <li>First Robot - Detailed robot integration tutorial</li> <li>Examples - Explore comprehensive robot demos</li> </ol>"},{"location":"getting-started/installation/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<pre><code># Custom port configuration\nexport HORUS_SDK_PORT=8081\nexport HORUS_UNITY_PORT=10001\n\n# Debug mode\nexport HORUS_DEBUG=true\n\n# Custom ROS2 domain\nexport ROS_DOMAIN_ID=42\n</code></pre>"},{"location":"getting-started/installation/#custom-robot-configurations","title":"Custom Robot Configurations","text":"<p>Create custom robot types in <code>~/.horus/robots/</code>:</p> <pre><code># ~/.horus/robots/custom_robot.py\nfrom horus import Robot, RobotType\nfrom horus.sensors import Camera, Lidar3D\n\ndef create_custom_robot():\n    robot = Robot(\"custom_robot\", RobotType.CUSTOM)\n    # Add custom sensors and configuration\n    return robot\n</code></pre> <p>For advanced configuration options, see the Developer Guide.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with HORUS SDK in less than 5 minutes!</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.10+ installed</li> <li>ROS2 Humble installed and sourced</li> <li>Git for cloning the repository</li> <li>Meta Quest 3 (optional, for full MR experience)</li> </ul> <p>Quick Check</p> <p>Verify your setup: <pre><code>python3 --version  # Should be 3.10+\nros2 --version     # Should show ROS2 Humble\n</code></pre></p>"},{"location":"getting-started/quickstart/#1-clone-and-build","title":"1. Clone and Build","text":"<pre><code># Clone the repository with submodules\ngit clone --recursive https://github.com/RICE-unige/horus_sdk.git\ncd horus_sdk\n\n# Build the ROS2 workspace\ncd horus_ros2_ws\ncolcon build\nsource install/setup.bash\ncd ..\n</code></pre>"},{"location":"getting-started/quickstart/#2-test-your-installation","title":"2. Test Your Installation","text":"<p>Run the quick test to verify everything works:</p> <pre><code>python3 examples/quick_test.py\n</code></pre> <p>Expected Output: <pre><code>\ud83d\ude80 HORUS SDK Basic Initialization Example\n==================================================\n\n1. Importing HORUS SDK...\n   \u2713 SDK imported successfully\n\n2. Initializing SDK with ROS2 backend...\nInitializing ROS2 backend\n  \u2713 ROS2 Installation: ROS2 humble detected\n  \u2713 HORUS Backend Package: HORUS backend package found  \n  \u2713 Network Port 8080: Port 8080 is available\n  \u2713 Backend startup: Ready on port 8080\n  \u2713 Backend connection: Connected on port 8080\n\nSDK initialized successfully\n</code></pre></p>"},{"location":"getting-started/quickstart/#3-create-your-first-robot","title":"3. Create Your First Robot","text":"<p>Create a new Python file <code>my_first_robot.py</code>:</p> my_first_robot.py<pre><code>#!/usr/bin/env python3\n\nfrom horus import Client, Robot, RobotType\nfrom horus.sensors import Camera, LaserScan\nfrom horus.dataviz import DataViz\n\ndef main():\n    # Initialize HORUS SDK\n    print(\"\ud83d\ude80 Initializing HORUS SDK...\")\n    client = Client(backend='ros2')\n\n    # Create a robot\n    print(\"\ud83e\udd16 Creating robot...\")\n    robot = Robot(\n        name=\"my_first_robot\",\n        robot_type=RobotType.WHEELED\n    )\n\n    # Add sensors\n    print(\"\ud83d\udcf7 Adding sensors...\")\n    camera = Camera(\n        name=\"front_camera\",\n        topic=\"/camera/image_raw\",\n        frame_id=\"camera_link\"\n    )\n\n    lidar = LaserScan(\n        name=\"lidar\",\n        topic=\"/scan\",\n        frame_id=\"base_scan\"\n    )\n\n    robot.add_sensor(camera)\n    robot.add_sensor(lidar)\n\n    # Create data visualization\n    print(\"\ud83c\udfa8 Setting up visualization...\")\n    dataviz = robot.create_dataviz()\n\n    # Add path planning visualization\n    robot.add_path_planning_to_dataviz(\n        dataviz,\n        global_path_topic=\"/path\",\n        local_path_topic=\"/local_path\"\n    )\n\n    # Register with HORUS\n    print(\"\ud83d\udce1 Registering robot with HORUS...\")\n    success, result = robot.register_with_horus(dataviz)\n\n    if success:\n        print(f\"\u2705 Robot registered successfully!\")\n        print(f\"   Robot ID: {result.get('robot_id')}\")\n        print(f\"   Assigned Color: {result.get('assigned_color')}\")\n        print(f\"   Total Sensors: {robot.get_sensor_count()}\")\n\n        # Keep the connection alive\n        print(\"\\n\ud83d\udd04 Robot is now active. Press Ctrl+C to stop.\")\n        try:\n            import time\n            while True:\n                time.sleep(1)\n        except KeyboardInterrupt:\n            print(\"\\n\ud83d\uded1 Shutting down...\")\n    else:\n        print(f\"\u274c Registration failed: {result.get('error')}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Run your robot:</p> <pre><code># Make sure ROS2 workspace is sourced\nsource horus_ros2_ws/install/setup.bash\n\n# Run your robot\npython3 my_first_robot.py\n</code></pre>"},{"location":"getting-started/quickstart/#4-connect-quest-3-optional","title":"4. Connect Quest 3 (Optional)","text":"<p>If you have a Meta Quest 3, you can see your robot in Mixed Reality:</p> <ol> <li> <p>Launch HORUS backend (if not already running):    <pre><code>source horus_ros2_ws/install/setup.bash\npython3 examples/quick_test.py\n</code></pre></p> </li> <li> <p>Note the connection details displayed:    <pre><code>\ud83c\udfae HORUS Mixed Reality Connection\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n  \ud83d\udce1 Connection Details:\n     IP Address: 192.168.1.100\n     Port:       10000\n     Protocol:   TCP\n</code></pre></p> </li> <li> <p>In your Quest 3 HORUS app, enter the IP and port shown</p> </li> <li> <p>Watch real-time connection status:    <pre><code>\u2713 HORUS MR connection: Connected from 192.168.1.50\n  \u2192 Mixed Reality interface active\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<p>\ud83c\udf89 Congratulations! You've successfully:</p> <ul> <li>\u2705 Set up HORUS SDK</li> <li>\u2705 Created your first robot</li> <li>\u2705 Connected to the MR system</li> <li>\u2705 Registered sensors and visualization</li> </ul>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"Explore ExamplesLearn the APIBuild Real Robots <p>Check out more comprehensive examples:</p> <pre><code># Carter robot with full setup\npython3 examples/carter_robot_setup.py\n\n# Multi-robot management\npython3 examples/live_robot_integration.py\n\n# Color management demo\npython3 examples/color_assignment_path_planning.py\n</code></pre> <p>Dive into the API documentation:</p> <ul> <li>Robot Management - Learn about robot types and configuration</li> <li>Sensors - Understand sensor integration</li> <li>Data Visualization - Master MR visualization</li> <li>API Reference - Complete API documentation</li> </ul> <p>Connect HORUS to real robot systems:</p> <ul> <li>Set up ROS2 topics for your robot</li> <li>Configure sensors and transforms</li> <li>Implement robot-specific plugins</li> <li>Deploy to production environments</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quickstart/#common-issues","title":"Common Issues","text":"<p>Port Already in Use</p> <p>Error: <code>Port 8080 is in use</code></p> <p>Solution: <pre><code># Kill existing backend processes\npkill -f horus_backend_node\npkill -f default_server_endpoint\n</code></pre></p> <p>ROS2 Not Found</p> <p>Error: <code>ROS2 Installation: Not detected</code></p> <p>Solution: <pre><code># Source ROS2 Humble\nsource /opt/ros/humble/setup.bash\n\n# Source the workspace\nsource horus_ros2_ws/install/setup.bash\n</code></pre></p> <p>Import Error</p> <p>Error: <code>No module named 'horus'</code></p> <p>Solution: Use the no-installation method or install the SDK: <pre><code># Option 1: No installation (recommended)\npython3 examples/quick_test.py\n\n# Option 2: Install SDK\npip install -e python/\n</code></pre></p>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: User Guide</li> <li>\ud83d\udc1b Issues: GitHub Issues</li> <li>\ud83d\udcac Discussions: GitHub Discussions</li> </ul>    **Ready for more advanced features?**    [User Guide](../user-guide/index.md){ .md-button .md-button--primary }   [API Reference](../api/index.md){ .md-button }"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the HORUS Mixed Reality robot fleet management system user guide. This comprehensive guide covers all aspects of managing robot fleets through Quest 3.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>HORUS transforms robot fleet management by providing immersive Mixed Reality interfaces on Meta Quest 3. This guide covers everything from basic robot operations to advanced multi-robot coordination.</p>"},{"location":"user-guide/#what-youll-learn","title":"What You'll Learn","text":"<p>This user guide covers all key aspects of HORUS MR fleet management:</p>"},{"location":"user-guide/#guide-sections-coming-soon","title":"\ud83d\udccb Guide Sections (Coming Soon)","text":"<ul> <li>\ud83c\udfd7\ufe0f System Architecture - Understanding HORUS system architecture and data flow from robots to MR</li> <li>\ud83e\udd16 Robot Management - Complete guide to robot registration, configuration, and lifecycle management  </li> <li>\ud83d\udce1 Sensor Integration - Sensor integration, configuration, and 3D visualization in Mixed Reality</li> <li>\ud83d\udcca Data Visualization - Advanced 3D data visualization, real-time streaming, and MR overlays</li> <li>\ud83c\udfa8 Color Management - Multi-robot fleet color coding and visual identification systems</li> <li>\ud83e\udd7d Mixed Reality Interface - Quest 3 interface, spatial controls, and immersive robot interaction</li> </ul> <p>Documentation Status</p> <p>The detailed user guide sections are currently being developed. For now, explore the Getting Started guides and API Reference.</p>"},{"location":"user-guide/#core-concepts","title":"Core Concepts","text":""},{"location":"user-guide/#mixed-reality-fleet-management","title":"Mixed Reality Fleet Management","text":"<p>HORUS provides unprecedented spatial awareness for robot fleet operations:</p> <ul> <li>3D Robot Visualization: See all robots in shared 3D space with real-time positioning</li> <li>Sensor Data Fusion: Live camera feeds, LiDAR point clouds, and telemetry overlays</li> <li>Spatial Control: Intuitive gesture-based robot control and mission planning</li> <li>Fleet Coordination: Multi-robot task assignment and coordination visualization</li> </ul>"},{"location":"user-guide/#system-components","title":"System Components","text":"<pre><code>graph TB\n    A[Robot Fleet] --&gt; B[HORUS SDK]\n    B --&gt; C[Backend Server]\n    C --&gt; D[Unity TCP Bridge]\n    D --&gt; E[Quest 3 MR App]\n    F[Operator] --&gt; E\n\n    G[Robot Sensors] --&gt; A\n    H[ROS2 Navigation] --&gt; A\n    I[Mission Planning] --&gt; A\n\n    style A fill:#fce4ec\n    style B fill:#e1f5fe\n    style C fill:#f3e5f5\n    style D fill:#e8f5e8\n    style E fill:#fff3e0\n    style F fill:#e3f2fd</code></pre>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/#prerequisites","title":"Prerequisites","text":"<p>Before diving into the user guide, ensure you have:</p> <ul> <li>Quest 3 Setup: HORUS MR app installed and configured</li> <li>SDK Installation: HORUS SDK installed and tested</li> <li>Robot Systems: ROS2 robots with basic navigation capabilities</li> </ul>"},{"location":"user-guide/#quick-start-checklist","title":"Quick Start Checklist","text":"<ul> <li> Complete Installation Guide</li> <li> Test robot connection with First Robot</li> <li> Review Quick Start Guide</li> <li> Explore API Reference for detailed SDK usage</li> </ul>"},{"location":"user-guide/#advanced-topics","title":"Advanced Topics","text":""},{"location":"user-guide/#multi-robot-coordination","title":"Multi-Robot Coordination","text":"<p>HORUS excels at managing multiple robots simultaneously:</p> <ul> <li>Fleet Visualization: See all robots in shared MR space</li> <li>Automatic Color Coding: Each robot gets unique visual identity</li> <li>Coordinated Planning: Multi-robot path planning and task assignment</li> <li>Real-time Monitoring: Live status of entire fleet</li> </ul>"},{"location":"user-guide/#production-deployment","title":"Production Deployment","text":"<p>For production environments, HORUS provides:</p> <ul> <li>Robust Connection Management: Automatic reconnection and error handling</li> <li>Scalable Architecture: Support for large robot fleets</li> <li>Performance Optimization: Low-latency MR visualization</li> <li>Security Features: Encrypted communication and access control</li> </ul>"},{"location":"user-guide/#support-and-community","title":"Support and Community","text":""},{"location":"user-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Start with this user guide and API Reference</li> <li>Examples: Explore comprehensive examples</li> <li>GitHub Issues: Report bugs and request features</li> <li>Community: Join discussions and share experiences</li> </ul>"},{"location":"user-guide/#contributing","title":"Contributing","text":"<p>HORUS is open source and welcomes contributions:</p> <ul> <li>Bug Reports: Help improve stability and reliability</li> <li>Feature Requests: Suggest new MR capabilities</li> <li>Code Contributions: Submit pull requests for enhancements</li> <li>Documentation: Help improve guides and tutorials</li> </ul>"},{"location":"user-guide/#whats-next","title":"What's Next?","text":"<p>Choose your path based on your needs:</p>"},{"location":"user-guide/#for-new-users","title":"For New Users","text":"<ol> <li>Getting Started - Installation and basic setup</li> <li>First Robot - Your first robot integration</li> <li>Quick Start - Complete walkthrough</li> </ol>"},{"location":"user-guide/#for-advanced-users","title":"For Advanced Users","text":"<ol> <li>API Reference - Complete SDK documentation</li> <li>Examples - Real-world implementations</li> <li>GitHub Repository - Latest source code and issues</li> </ol>"},{"location":"user-guide/#for-developers","title":"For Developers","text":"<ol> <li>API Reference - Complete API documentation</li> <li>Examples - Integration examples</li> <li>GitHub Issues - Report bugs and request features</li> </ol> <p>Ready to explore HORUS Mixed Reality robot fleet management? Choose a section above to begin your journey into the future of robot operations!</p>"}]}
